<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络学习-基本概念</title>
      <link href="/2019/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="各层完成的主要功能"><a href="#各层完成的主要功能" class="headerlink" title="各层完成的主要功能"></a>各层完成的主要功能</h2><ul><li>差错控制，使相应层次对等方的通信更加可靠</li><li>流量控制，发送的发送速率必须使接收方来得及接收，不要太快</li><li>分段和重装，发送端将要发送的数据块划分为更小的单位，在接收端将其还原</li><li>复用和分用，发送端几个高层会话复用一条低层的连接，在接收端再进行分用</li><li>连接建立和释放，交换数据前先建立一条逻辑连接，数据传送结束后释放连接<a id="more"></a></li></ul><h2 id="OSI七层协议体系结构"><a href="#OSI七层协议体系结构" class="headerlink" title="OSI七层协议体系结构"></a>OSI七层协议体系结构</h2><ul><li>应用层</li><li>表现层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h2 id="TCP-IP-四层体系结构"><a href="#TCP-IP-四层体系结构" class="headerlink" title="TCP/IP 四层体系结构"></a>TCP/IP 四层体系结构</h2><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>网络接口层</li></ul><h2 id="通用五层体系结构"><a href="#通用五层体系结构" class="headerlink" title="通用五层体系结构"></a>通用五层体系结构</h2><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h2 id="协议名词"><a href="#协议名词" class="headerlink" title="协议名词"></a>协议名词</h2><ul><li>PDU (Protocol Data Unit) ，是指协议数据单元</li><li>SAP (Service Access Point)，服务访问点，同一系统相邻两层的实体进行交互的地方</li><li>SDU (Service Data Unit)，服务数据单元，层与层之间交换的数据的单位</li><li>PCI (Protocol Control Infomation)，协议控制信息，每层会附加属于自己的那一层的协议<br>信息</li></ul><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><ul><li>信噪比，信号和平均功率和噪声的平均功率之比</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发</title>
      <link href="/2019/09/20/%E5%B9%B6%E5%8F%91/"/>
      <url>/2019/09/20/%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOLANG测试</title>
      <link href="/2019/08/20/GOLANG%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/08/20/GOLANG%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="testing-单元测试"><a href="#testing-单元测试" class="headerlink" title="testing - 单元测试"></a>testing - 单元测试</h2><p>testing  为GO语言package 提供自动化测试的支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func TestXxx(*testing.T)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="要测试的代码："><a href="#要测试的代码：" class="headerlink" title="要测试的代码："></a>要测试的代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func Fib(n int) int &#123;</span><br><span class="line">        if n &lt; 2 &#123;</span><br><span class="line">                return n</span><br><span class="line">        &#125;</span><br><span class="line">        return Fib(n-1) + Fib(n-1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func TestFib(t *testing.T) &#123;</span><br><span class="line">    var (</span><br><span class="line">        in       = 7</span><br><span class="line">        expected = 13</span><br><span class="line">    )</span><br><span class="line">    actual := Fib(in)</span><br><span class="line">    if actual != expected &#123;</span><br><span class="line">        t.Errorf(&quot;Fib(%d) = %d; expected %d&quot;, in, actual, expected)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go test .</span><br><span class="line">--- FAIL: TestSum (0.00s)</span><br><span class="line">    t_test.go:16: Fib(10) = 64; expected 13</span><br><span class="line">FAIL</span><br><span class="line">FAIL    chapter09/testing    0.009s</span><br></pre></td></tr></table></figure><h3 id="Table-Driven-Test"><a href="#Table-Driven-Test" class="headerlink" title="Table-Driven Test"></a>Table-Driven Test</h3><h3 id="case-覆盖"><a href="#case-覆盖" class="headerlink" title="case 覆盖"></a>case 覆盖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func TestFib(t *testing.T) &#123;</span><br><span class="line">    var fibTests = []struct &#123;</span><br><span class="line">        in       int // input</span><br><span class="line">        expected int // expected result</span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;1, 1&#125;,</span><br><span class="line">        &#123;2, 1&#125;,</span><br><span class="line">        &#123;3, 2&#125;,</span><br><span class="line">        &#123;4, 3&#125;,</span><br><span class="line">        &#123;5, 5&#125;,</span><br><span class="line">        &#123;6, 8&#125;,</span><br><span class="line">        &#123;7, 13&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for _, tt := range fibTests &#123;</span><br><span class="line">        actual := Fib(tt.in)</span><br><span class="line">        if actual != tt.expected &#123;</span><br><span class="line">            t.Errorf(&quot;Fib(%d) = %d; expected %d&quot;, tt.in, actual, tt.expected)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2019/08/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/08/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数据结构就是研究数据的逻辑结构和物理结构以及它们之间相互关系，并对这种结构定义相应的运算，而且确保经过这些运算后所得到的新结构仍然是原来的结构类型。</p><a id="more"></a><ul><li>数据：所有能被输入到计算机中，且能被计算机处理的符号的集合。是计算机操作的对象的总称。</li><li>数据元素：数据（集合）中的一个“个体”，数据及结构中讨论的基本单位</li><li>数据项：数据的不可分割的最小单位。一个数据元素可由若干个数据项组成。</li><li>数据类型：在一种程序设计语言中，变量所具有的数据种类。整型、字符型等等</li><li>逻辑结构：数据之间的相互关系。<ul><li>集合 结构中的数据元素除了同属于一种类型外，别无其它关系。</li><li>线性结构 数据元素之间一对一的关系</li><li>树形结构 数据元素之间一对多的关系</li><li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系</li></ul></li><li>物理结构/存储结构：数据在计算机中的表示。物理结构是描述数据具体在内存中的存储（如：顺序结构、链式结构、索引结构、哈希结构）等</li><li>在数据结构中,从逻辑上可以将其分为线性结构和非线性结构</li><li>数据结构的基本操作的设置的最重要的准则<ul><li>实现应用程序与存储结构的独立。实现应用程序是“逻辑结构”</li><li>存储的是“物理结构”。逻辑结构主要是对该结构操作的设定物理结构是描述数据具体在内存中的</li><li>顺序结构、链式结构、索引结构、希哈结构</li></ul></li><li>顺序存储结构中，线性表的逻辑顺序和物理顺序总是一致的。但在链式存储结构中，线性表的逻辑顺序和物理顺序一般是不同的。</li><li>算法五个特性： 有穷性、确定性、可行性、输入、输出</li><li>算法设计要求：正确性、可读性、健壮性、高效率与低存储量需求。</li><li>算法的描述有伪程序、流程图、N-S结构图等。E-R图是实体联系模型，不是程序的描述方式。</li><li>设计算法在执行时间时需要考虑：算法选用的规模、问题的规模</li><li>时间复杂度：算法的执行时间与原操作执行次数之和成正比。时间复杂度有小到大：O(1)、O(logn)、O(n)、O(nlogn)、O(n2)、O(n3)。幂次时间复杂度有小到大O(2n)、O(n!)、O(nn)</li><li>空间复杂度：若输入数据所占空间只取决于问题本身，和算法无关，则只需要分析除输入和程序之外的辅助变量所占额外空间。</li></ul><hr><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><ul><li>对于同一个线性表，其每一个数据元素的值虽然不同，但必须具有相同的数据类型</li><li>线性表是一种典型的线性结构。头结点无前驱有一个后继，尾节点无后继有一个前驱。链表只能顺序查找，定位一个元素的时间为O(N)，删除一个元素的时间为O(1)</li></ul><h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><p>把线性表的结点按逻辑顺序依次存放在一组地址连续的存储单元里。用这种方法存储的线性表简称顺序表。是一种随机存取的存储结构。顺序存储指内存地址是一块的，随机存取指访问时可以按下标随机访问，存储和存取是不一样的。如果是存储，则是指按顺序的，如果是存取，则是可以随机的，可以利用元素下标进行。数组比线性表速度更快的是：原地逆序、返回中间节点、选择随机节点。 </p><ul><li>便于线性表的构造和任意元素的访问</li><li>插入：插入新结点，之后结点后移。平均时间复杂度:O(n)</li><li>删除：删除节点，之后结点前移。平均时间复杂度:O(n)</li></ul><h3 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h3><ul><li>单链表中每个结点的存储地址是存放在其前趋结点next域中，而开始结点无前趋，故应设头指针head指向开始结点。同时，由于最后一个结点无后继，故结点的指针域为空，即NULL。头插法建表(逆序)、尾插法建表(顺序)。增加头结点的目的是算法实现上的方便，但增大了内存开销。 <ul><li>查找：只能从链表的头指针出发，顺链域next逐个结点往下搜索，直到搜索到第i个结点为止。因此，链表不是随机存取结构。</li><li>插入：先找到表的第i-1的存储位置，然后插入。新结点先连后继，再连前驱。</li><li>删除：首先找到ai-1的存储位置p。然后令p–&gt;next指向ai的直接后继结点，即把ai从链上摘下。最后释放结点ai的空间.r=p-&gt;next;p-&gt;next=r-&gt;next;delete r。<br>判断一个单向链表中是否存在环的最佳方法是快慢指针。</li></ul></li><li>静态链表：用一维数组来实现线性链表，这种用一维数组表示的线性链表，称为静态链表。静态：体现在表的容量是一定的。（数组的大小）；链表：插入与删除同前面所述的动态链表方法相同。静态链表中指针表示的是下一元素在数组中的位置。<br>静态链表是用数组实现的，是顺序的存储结构，在物理地址上是连续的，而且需要预先分配大小。动态链表是用申请内存函数（C是malloc,C++是new）动态申请内存的，所以在链表的长度上没有限制。动态链表因为是动态申请内存的，所以每个节点的物理地址不连续，要通过指针来顺序访问。静态链表在插入、删除时也是通过修改指针域来实现的，与动态链表没有什么分别</li><li>循环链表：是一种头尾相接的链表。其特点是无须增加存储量，仅对表的链接方式稍作改变，即可使得表处理更加方便灵活。<br>在单链表中，将终端结点的指针域NULL改为指向表头结点的或开始结点，就得到了单链形式的循环链表，并简单称为单循环链表。由于循环链表中没有NULL指针，故涉及遍历操作时，其终止条件就不再像非循环链表那样判断p或p—&gt;next是否为空，而是判断它们是否等于某一指定指针，如头指针或尾指针等。</li><li>双向链表:在单链表的每个结点里再增加一个指向其直接前趋的指针域prior。这样就形成的链表中有两个方向不同的链。双链表一般由头指针唯一确定的，将头结点和尾结点链接起来构成循环链表，并称之为双向链表。设指针p指向某一结点，则双向链表结构的对称性可用下式描述：p—&gt;prior—&gt;next=p=p—&gt;next—&gt;prior。从两个方向搜索双链表，比从一个方向搜索双链表的方差要小。 <ul><li>插入：先搞定插入节点的前驱和后继，再搞定后结点的前驱，最后搞定前结点的后继。</li><li>在有序双向链表中定位删除一个元素的平均时间复杂度为O(n)</li><li>可以直接删除当前指针所指向的节点。而不需要像单向链表中，删除一个元素必须找到其前驱。因此在插入数据时，单向链表和双向链表操作复杂度相同，而删除数据时，双向链表的性能优于单向链表</li></ul></li></ul><h3 id="线性表的抽象数据类型描述"><a href="#线性表的抽象数据类型描述" class="headerlink" title="线性表的抽象数据类型描述"></a>线性表的抽象数据类型描述</h3><ul><li>线性表的置空操作clear()：将一个已经存在的线性表置为空表。</li><li>线性表判空操作isEmpty()：判断线性表是否为空，若为空，则返回true；否则，返回为false。</li><li>求线性表的长度操作length()：求线性表中的数据元素的个数并返回其值。</li><li>取元素操作get(i)：读取并返回线性表中的第i个数据元素的值。其中i的取值范围为0≤i≤length()-1。</li><li>插入操作insert(i,x)：在线性表的第i个数据元素之前插入一个值为x的数据元素。其中i的取值范围为0≤i≤length()。当i=0时，在表头插入x；当i=length()时，在表尾插入x。</li><li>删除操作remove(i)：删除并返回线性表中第i个数据元素。其中i的取值范围为0≤i≤length()-1。</li><li>查找操作indexOf(x)：返回线性表中首次出现的指定的数据元素的位序号，若线性表中不包含此数据元素，则返回-1。</li></ul><p>线性表的抽线数据类型用Golang接口描述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">    &quot;errors&quot;</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">const MAX_LENGTH = 20 // 常量定义线性表最大长度</span><br><span class="line">//　定义一个线性表顺序存储结构体</span><br><span class="line">type LineList struct &#123;</span><br><span class="line">    MaxLength  int</span><br><span class="line">    Length int</span><br><span class="line">    LineListContent []interface&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">//　初始化一个线性表</span><br><span class="line">func InitLineList () *LineList&#123;</span><br><span class="line">    return &amp;LineList&#123;MaxLength:MAX_LENGTH, LineListContent:make([]interface&#123;&#125;,0,MAX_LENGTH)&#125;</span><br><span class="line">&#125;</span><br><span class="line">//　判断当前线性表是否为空</span><br><span class="line">func (l LineList) IsEmpty() bool &#123;</span><br><span class="line">    if l.Length == 0&#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line">// 判断当前线性表是否满了</span><br><span class="line">func (l LineList) IsFull() bool&#123;</span><br><span class="line">    if l.Length == l.MaxLength&#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line">// 判断索引是否越界，越界返回ｔｒｕｅ</span><br><span class="line">func (l LineList) indexOver(i int) bool&#123;</span><br><span class="line">    if i &lt; 1 || i &gt;l.Length&#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line">// 获取一个ｎｏｄｅ数据</span><br><span class="line">func (l LineList) getData(i int )(interface&#123;&#125;,error)&#123;</span><br><span class="line">    if ok:= l.indexOver(i); ok&#123;</span><br><span class="line">        return &quot;&quot;,errors.New(&quot;查找的索引不在线性表范围内&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    return l.LineListContent[i+1],nil</span><br><span class="line">&#125;</span><br><span class="line">// 任意位置删除一个ｎｏｄｅ数据</span><br><span class="line">func (l *LineList) Delete(i int)(interface&#123;&#125;,error)&#123;</span><br><span class="line">    if ok:= l.indexOver(i); ok&#123;</span><br><span class="line">        return &quot;&quot;,errors.New(&quot;删除的索引不在线性表范围内&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    if ok:=l.IsEmpty();ok&#123;</span><br><span class="line">        return  &quot;&quot;,errors.New(&quot;空表没有可删除的数据&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    deleteData := l.LineListContent[i-1]</span><br><span class="line">    for j:=i-1; j&lt;l.Length-1;j++&#123;</span><br><span class="line">        l.LineListContent[j] = l.LineListContent[j+1]</span><br><span class="line">        fmt.Println(j,&quot;个&quot;,l.LineListContent[j])</span><br><span class="line">    &#125;</span><br><span class="line">    l.LineListContent = l.LineListContent[:l.Length-1] // 留了最后一个在，需要切除</span><br><span class="line">    l.Length --</span><br><span class="line">    return deleteData,nil</span><br><span class="line">&#125;</span><br><span class="line">//末尾　ｐｏｐ　一个数据</span><br><span class="line">func (l *LineList) Pop()(interface&#123;&#125;,error)&#123;</span><br><span class="line">    if ok:= l.IsEmpty();ok&#123;</span><br><span class="line">        return &quot;&quot;,errors.New(&quot;空表，无法删除任何数据&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    temp := l.LineListContent[l.Length-1]</span><br><span class="line">    l.LineListContent = l.LineListContent[:l.Length-1]</span><br><span class="line">    l.Length --</span><br><span class="line">    return temp,nil</span><br><span class="line">&#125;</span><br><span class="line">// 末尾　Append 一个数据</span><br><span class="line">func (l *LineList) Append(data interface&#123;&#125;)(bool,error)&#123;</span><br><span class="line">    if ok:= l.IsFull(); ok&#123;</span><br><span class="line">        return false,errors.New(&quot;线性表已满，无法添加数据&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    l.LineListContent = append(l.LineListContent, data)</span><br><span class="line">    l.Length ++</span><br><span class="line">    return true,nil</span><br><span class="line">&#125;</span><br><span class="line">// 任意位置　ｉｎｓｅｒｔ　一个数据</span><br><span class="line">func (l *LineList) Insert(i int,data interface&#123;&#125;)(bool,error)&#123;</span><br><span class="line">    if ok:= l.IsFull(); ok&#123;</span><br><span class="line">        return false,errors.New(&quot;线性表已满，无法添加数据&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    if ok:= l.indexOver(i);ok&#123;</span><br><span class="line">        return false,errors.New(&quot;插入点越界&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    l.Append(&quot;&quot;) // 增加一个空数据，防止下面访问越界</span><br><span class="line">    for j:=l.Length-1;j&gt;i-1;j--&#123;</span><br><span class="line">        //从后往前赋值，新增一个空ｎｏｄｅ，然后把数据一个个后移，直到插入的位置</span><br><span class="line">        //知道线性表从１开始，而切片是从０开始的</span><br><span class="line">        l.LineListContent[j] = l.LineListContent[j-1]</span><br><span class="line">    &#125;</span><br><span class="line">    l.LineListContent[i-1] = data</span><br><span class="line">    return true,nil</span><br><span class="line">&#125;</span><br><span class="line">func main()&#123;</span><br><span class="line">    ls := InitLineList()</span><br><span class="line">    ls.Append(11)</span><br><span class="line">    fmt.Println(ls.LineListContent) //[11]</span><br><span class="line">    fmt.Println(ls.Length) // 1</span><br><span class="line">    ls.Insert(3,&quot;gac&quot;)</span><br><span class="line">    ls.Insert(1,&quot;gac&quot;)</span><br><span class="line">    fmt.Println(ls.LineListContent) //[gac 11]</span><br><span class="line">    fmt.Println(ls.Length)  //2</span><br><span class="line">    ls.Delete(2)</span><br><span class="line">    fmt.Println(ls.LineListContent) //[gac]</span><br><span class="line">    fmt.Println(ls.Length)     // 1</span><br><span class="line">    cd,err0 := ls.Pop()</span><br><span class="line">    if err0==nil&#123;</span><br><span class="line">        fmt.Println(cd)      // gac</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ls.LineListContent) //[]</span><br><span class="line">    fmt.Println(ls.Length)    // 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="/2019/08/08/Redis%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/08/08/Redis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><p>不在赘述、各种环境各种版本网上随便一搜都可以</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure><h3 id="Redis-命令行客户端"><a href="#Redis-命令行客户端" class="headerlink" title="Redis 命令行客户端"></a>Redis 命令行客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h IP -p port</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>获得符合规则的键名列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYS pattern</span><br></pre></td></tr></table></figure></li><li><p>判断一个键是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXISTS key</span><br></pre></td></tr></table></figure></li><li><p>删除键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEL key [key ....]</span><br></pre></td></tr></table></figure></li><li><p>获取键值得数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TYPE key</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>Redis 中最基本的数据类型，他能存储任何形式的字符串，最大容量512M</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li><p>赋值与取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET key value</span><br><span class="line">GET key</span><br></pre></td></tr></table></figure></li><li><p>递增数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCR key</span><br></pre></td></tr></table></figure></li><li><p>增加指定的整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCRBY key increment</span><br></pre></td></tr></table></figure></li><li><p>减少指定的整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DECR key</span><br><span class="line">DECRBY key decrement</span><br></pre></td></tr></table></figure></li><li><p>增加指定浮点数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCRBYFLOAT key increment</span><br></pre></td></tr></table></figure></li><li><p>向尾部追加值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPEND key value</span><br></pre></td></tr></table></figure></li><li><p>获取字符串长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STRLEN key</span><br></pre></td></tr></table></figure></li><li><p>同时获得/设置多个键值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MGET key [key ...]</span><br><span class="line">MSET key value [key value ...]</span><br></pre></td></tr></table></figure></li><li><p>位操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GETBIT key offset</span><br><span class="line">SETBIT key offset value </span><br><span class="line">BITCOUNT key [start] [end]</span><br><span class="line">BITOP operation destkey key [key ...]</span><br></pre></td></tr></table></figure></li></ul><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>命名（推荐）：对象类型：对象ID：对象属性（例：user:1:friends）</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; set baidu http://www.baidu</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; append baidu .com</span><br><span class="line">(integer) 20</span><br><span class="line">redis 127.0.0.1:6379&gt; get baidu</span><br><span class="line">&quot;http://www.baidu.com&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; set visitors 0</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; incr visitors</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; incr visitors</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; get visitors</span><br><span class="line">&quot;2&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; incrby visitors 100</span><br><span class="line">(integer) 102</span><br><span class="line">redis 127.0.0.1:6379&gt; get visitors</span><br><span class="line">&quot;102&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; type baidu</span><br><span class="line">string</span><br><span class="line">redis 127.0.0.1:6379&gt; type visitors</span><br><span class="line">string</span><br><span class="line">redis 127.0.0.1:6379&gt; ttl baidu</span><br><span class="line">(integer) -1</span><br><span class="line">redis 127.0.0.1:6379&gt; rename baidu baidu-site</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; get baidu</span><br><span class="line">(nil)</span><br><span class="line">redis 127.0.0.1:6379&gt; get baidu-site</span><br><span class="line">&quot;http://www.baidu.com&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="散列类型（字典，哈希表）"><a href="#散列类型（字典，哈希表）" class="headerlink" title="散列类型（字典，哈希表）"></a>散列类型（字典，哈希表）</h2><p>Redis采用字典结构以键值对的形式存储数据的，散列类型的键值也是一种字典结构，其存储了字段和字段值得映射，一个散列类型键可以包含2的32次-1个字段</p><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><ul><li><p>赋值与取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HSET key field value </span><br><span class="line">HGET key field </span><br><span class="line">HMSET key field value [field value ...]</span><br><span class="line">HMGET key field [field ...]</span><br><span class="line">HGETALL key</span><br></pre></td></tr></table></figure></li><li><p>HSET 不区分插入和更新，修改数据是不必判断字段是否存在</p></li><li><p>判断字段是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEXISTS key field</span><br></pre></td></tr></table></figure></li><li><p>当字段不存在时赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HSETNX key field value</span><br></pre></td></tr></table></figure></li><li><p>增加数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HINCRBY key field increment</span><br></pre></td></tr></table></figure></li><li><p>删除字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HDEL key field [field ...]</span><br></pre></td></tr></table></figure></li><li><p>只取字段名或字段值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKEYS key</span><br><span class="line">HVALS key</span><br></pre></td></tr></table></figure></li><li><p>获得字段数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HLEN key</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset person name jack</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset person age 20</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset person sex famale</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall person</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;jack&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">5) &quot;sex&quot;</span><br><span class="line">6) &quot;famale&quot;</span><br><span class="line">127.0.0.1:6379&gt; hkeys person</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;sex&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals person</span><br><span class="line">1) &quot;jack&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;famale&quot;</span><br></pre></td></tr></table></figure><h2 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h2><p>可以存储一个有序的字符串列表，常用的操作是向列表良多添加元素，或者获得列表中的某一段</p><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><ul><li><p>向列表两端添加元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPUSH key value [value ...]</span><br><span class="line">RPUSH key value [value ...]</span><br></pre></td></tr></table></figure></li><li><p>从列表两端弹出元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPOP key </span><br><span class="line">RPOP key</span><br></pre></td></tr></table></figure></li><li><p>获取列表中元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LLEN key</span><br></pre></td></tr></table></figure></li><li><p>获得列表片段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LRANGE key start stop</span><br></pre></td></tr></table></figure></li><li><p>删除列表中指定的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LREM key count value</span><br></pre></td></tr></table></figure></li><li><p>获得/设置指定索引的元素值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LINDEX key index</span><br><span class="line">LSET key index value</span><br></pre></td></tr></table></figure></li><li><p>只保留列表指定片段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LTRIM key start end</span><br></pre></td></tr></table></figure></li><li><p>向列表中插入元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LINSERT key BEFORE|AETER pivot value</span><br></pre></td></tr></table></figure></li><li><p>将元素从一个列表转移到另一个列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPOPLPUSH source destination</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush list1 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush list1 hello</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; rpush list1 world</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; llen list1</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange list1 0 3</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;redis&quot;</span><br><span class="line">3) &quot;world&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; lpop list1</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; rpop list1</span><br><span class="line">&quot;world&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange list1 0 3</span><br><span class="line">1) &quot;redis&quot;</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>可以理解为一堆值不重复的列表，类似数学领域中的集合概念，且Redis也提供了针对集合的求交集、并集、差集等操作。<br>set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。</p><h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h3><ul><li><p>添加一个或者多个元素到集合(set)里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SADD</span><br><span class="line">SADD key member [member ...]</span><br></pre></td></tr></table></figure></li><li><p>获取集合里面的元素数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SACRD</span><br><span class="line">SCARD key</span><br></pre></td></tr></table></figure></li><li><p>获得队列不存在的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SDIFF</span><br><span class="line">SDIFF key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>获得队列不存在的元素，并存储在一个关键的结果集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SDIFFSTORE</span><br><span class="line">SDIFFSTORE destination key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>获得两个集合的交集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SINTER</span><br><span class="line">SINTER key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>获得两个集合的交集，并存储在一个集合中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SINTERSTORE</span><br><span class="line">SINTERSTORE destination key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>确定一个给定的值是一个集合的成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SISMEMBER</span><br><span class="line">SISMEMBER key member</span><br></pre></td></tr></table></figure></li><li><p>获取集合里面的所有key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SMEMBERS</span><br><span class="line">SMEMBERS key</span><br></pre></td></tr></table></figure></li><li><p>移动集合里面的一个key到另一个集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SMOVE</span><br><span class="line">SMOVE source destination member</span><br></pre></td></tr></table></figure></li><li><p>获取并删除一个集合里面的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SPOP</span><br><span class="line">SPOP key [count]</span><br></pre></td></tr></table></figure></li><li><p>从集合里面随机获取一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SRANDMEMBER</span><br><span class="line">SRANDMEMBER key [count]</span><br></pre></td></tr></table></figure></li><li><p>从集合里删除一个或多个元素，不存在的元素会被忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SREM</span><br><span class="line">SREM key member [member ...]</span><br></pre></td></tr></table></figure></li><li><p>添加多个set元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUNION</span><br><span class="line">SUNION key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>合并set元素，并将结果存入新的set里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUNIONSTORE</span><br><span class="line">SUNIONSTORE destination key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>迭代set里面的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SSCAN</span><br><span class="line">SSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure></li></ul><h2 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h2><p>一个有序集合的每个成员带有分数，用于进行排序。<br>Redis有序集合添加、删除和测试的时间复杂度均为O(1)(固定时间，无论里面包含的元素集合的数量)<br>Redis sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score,使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>用户的积分排行榜需求就可以通过有序集合实现。还有上面介绍的使用List实现轻量级的消息队列，其实也可以通过Sorted Set实现有优先级或按权重的队列。</p><h3 id="命令-4"><a href="#命令-4" class="headerlink" title="命令"></a>命令</h3><ul><li><p>添加一个或多个成员到有序集合，或者如果它已经存在更新其分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZADD</span><br><span class="line">ZADD key score1 member1 [score2 member2]</span><br></pre></td></tr></table></figure></li><li><p>得到的有序集合成员的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZCARD</span><br><span class="line">ZCARD key</span><br></pre></td></tr></table></figure></li><li><p>计算一个有序集合成员与给定值范围内的分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZCOUNT</span><br><span class="line">ZCOUNT key min max</span><br></pre></td></tr></table></figure></li><li><p>在有序集合增加成员的分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZINCRBY</span><br><span class="line">ZINCRBY key increment member</span><br></pre></td></tr></table></figure></li><li><p>多重交叉排序集合，并存储生成一个新的键有序集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZINTERSTORE</span><br><span class="line">ZINTERSTORE destination numkeys key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>计算一个给定的字典范围之间的有序集合成员的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZLEXCOUNT</span><br><span class="line">ZLEXCOUNT key min max</span><br></pre></td></tr></table></figure></li><li><p>由索引返回一个成员范围的有序集合（从低到高）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZRANGE</span><br><span class="line">ZRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure></li><li><p>返回一个成员范围的有序集合（由字典范围）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYLEX</span><br><span class="line">ZRANGEBYLEX key min max [LIMIT offset count]</span><br></pre></td></tr></table></figure></li><li><p>返回有序集key中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员，有序集成员按 score 值递增(从小到大)次序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCORE</span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</span><br></pre></td></tr></table></figure></li><li><p>确定成员的索引中有序集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZRANK</span><br><span class="line">ZRANK key member</span><br></pre></td></tr></table></figure></li><li><p>从有序集合中删除一个或多个成员，不存在的成员将被忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZREM</span><br><span class="line">ZREM key member [member ...]</span><br></pre></td></tr></table></figure></li><li><p>删除所有成员在给定的字典范围之间的有序集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYLEX</span><br><span class="line">ZREMRANGEBYLEX key min max</span><br></pre></td></tr></table></figure></li><li><p>在给定的索引之内删除所有成员的有序集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYRANK</span><br><span class="line">ZREMRANGEBYRANK key start stop</span><br></pre></td></tr></table></figure></li><li><p>在给定的分数之内删除所有成员的有序集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZREMRANGEBYSCORE</span><br><span class="line">ZREMRANGEBYSCORE key min max</span><br></pre></td></tr></table></figure></li><li><p>返回一个成员范围的有序集合，通过索引，以分数排序，从高分到低分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANGE</span><br><span class="line">ZREVRANGE key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure></li><li><p>返回一个成员范围的有序集合，以socre排序从高到低</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANGEBYSCORE</span><br><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES]</span><br></pre></td></tr></table></figure></li><li><p>确定一个有序集合成员的索引，以分数排序，从高分到低分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANK</span><br><span class="line">ZREVRANK key member</span><br></pre></td></tr></table></figure></li><li><p>获取给定成员相关联的分数在一个有序集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSCORE</span><br><span class="line">ZSCORE key member</span><br></pre></td></tr></table></figure></li><li><p>添加多个集排序，所得排序集合存储在一个新的键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZUNIONSTORE</span><br><span class="line">ZUNIONSTORE destination numkeys key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>增量迭代排序元素集和相关的分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZSCAN</span><br><span class="line">ZSCAN key cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用示例-3"><a href="#使用示例-3" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zadd dbs 100 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd dbs 98 memcached</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd dbs 99 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd dbs 99 leveldb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zcard dbs</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; zcount dbs 10 99</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; zrank dbs leveldb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zrank dbs other</span><br><span class="line">(nil)</span><br><span class="line">redis 127.0.0.1:6379&gt; zrangebyscore dbs 98 100</span><br><span class="line">1) &quot;memcached&quot;</span><br><span class="line">2) &quot;leveldb&quot;</span><br><span class="line">3) &quot;mongodb&quot;</span><br><span class="line">4) &quot;redis&quot;</span><br><span class="line">Reference</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>Redis中的事务十一组命令的集合    将属于一个事物的命令先送给Redis，然后再让Redis一次执行这些命令</p><h4 id="使用示例-4"><a href="#使用示例-4" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6789&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6789&gt; SADD &quot;user:1:following&quot; 2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6789&gt; SADD &quot;user:2:followers&quot; 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6789&gt; EXEC</span><br><span class="line">1) (integer) 0</span><br><span class="line">2) (integer) 0</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ul><li>语法错误：不存在或参数不对<ul><li>执行EXEC命令后Redis就直接返回错误，正确的命令也不会执行</li></ul></li><li>运行错误:使用不同类型命令<ul><li>错误命令之前命令不执行 之后命令会执行</li><li>Redis 无回滚</li></ul></li></ul><h3 id="watch-命令介绍"><a href="#watch-命令介绍" class="headerlink" title="watch 命令介绍"></a>watch 命令介绍</h3><h4 id="概述：watch-命令可以监控一个或多个键，一点其中有一个键被修改（或删除），之后的事务就不会执行。监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）"><a href="#概述：watch-命令可以监控一个或多个键，一点其中有一个键被修改（或删除），之后的事务就不会执行。监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）" class="headerlink" title="概述：watch 命令可以监控一个或多个键，一点其中有一个键被修改（或删除），之后的事务就不会执行。监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）"></a>概述：watch 命令可以监控一个或多个键，一点其中有一个键被修改（或删除），之后的事务就不会执行。监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）</h4><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6789&gt; SET demo 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6789&gt; watch demo</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6789&gt; set demo 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6789&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6789&gt; set demo 3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6789&gt; EXEC -</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6789&gt; get key</span><br><span class="line">&quot;2&quot;</span><br></pre></td></tr></table></figure><h2 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h2><ul><li><p>设置过期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPIRE</span><br><span class="line">EXPIRE key sconds</span><br></pre></td></tr></table></figure></li><li><p>查看过期时间(不存在返回-2，键没有过期时间-1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TTL</span><br><span class="line">TTL foo</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现访问频率限制之一"><a href="#实现访问频率限制之一" class="headerlink" title="实现访问频率限制之一"></a>实现访问频率限制之一</h3><pre><code>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$isKeyExists = EXISTS rete.limiting:$IP</span><br><span class="line">if $isKeyExists is 1 </span><br><span class="line">$times = INCR rate.limiting:$IP</span><br><span class="line">if $times &gt; 100 </span><br><span class="line">print 访问超限 稍后重试</span><br><span class="line">else </span><br><span class="line">MULTL</span><br><span class="line">INCR rate.limiting:$IP</span><br><span class="line">EXPIRE $keyName, 60</span><br><span class="line">EXEC</span><br></pre></td></tr></table></figure></code></pre><h3 id="实现访问频率限制之二"><a href="#实现访问频率限制之二" class="headerlink" title="实现访问频率限制之二"></a>实现访问频率限制之二</h3><pre><code>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$listLength = L:EN rate.limiting:$IP</span><br><span class="line">if $listLength &lt; 10</span><br><span class="line">LPUSH rate.limitingL$IP, now()</span><br><span class="line">else </span><br><span class="line">$time = LINDEX rate.limiting:$IP, -1</span><br><span class="line">if now() - $time &lt; 60 </span><br><span class="line">print 超过限制</span><br><span class="line">else </span><br><span class="line">LPUSH rate.limiting:$IP, now()</span><br><span class="line">LTRIM rate.limiting:$IP, 0, 9</span><br><span class="line"></span><br><span class="line">// now() 获得当前Unix时间</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2018/08/07/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/07/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>策略模式定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户</p><a id="more"></a><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>需要有一系列不同的算法，这些算法完成的工作是同样的，只是实现不同，强调以相同的方式调用所有的算法，减少算法类和使用算法类之间的耦合</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>使代码结构清晰，便于维护，简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试 每个算法的修改都不会影响到其他的算法</p><h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2><p>商场商品价格计算，其中涉及到的有商品的单价，个数，折扣 折扣的策略有：</p><ul><li>固定折扣</li><li>满减</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">type CashSuper interface &#123;</span><br><span class="line">Accept(float64) float64</span><br><span class="line">&#125;</span><br><span class="line">//CashNormal normal strategy</span><br><span class="line">type CashNormal struct&#123;&#125;</span><br><span class="line">func (normal CashNormal) Accept(money float64) float64 &#123;</span><br><span class="line">return money</span><br><span class="line">&#125;</span><br><span class="line">//CashRebate</span><br><span class="line">type CashRebate struct &#123;</span><br><span class="line">moneyRebate float64</span><br><span class="line">&#125;</span><br><span class="line">func (re CashRebate) Accept(money float64) float64 &#123;</span><br><span class="line">return money * re.moneyRebate</span><br><span class="line">&#125;</span><br><span class="line">//CashReturn</span><br><span class="line">type CashReturn struct &#123;</span><br><span class="line">moneyCondition float64</span><br><span class="line">moneyReturn    float64</span><br><span class="line">&#125;</span><br><span class="line">func (re CashReturn) Accept(money float64) float64 &#123;</span><br><span class="line">if money &gt;= re.moneyCondition &#123;</span><br><span class="line">return money - re.moneyReturn</span><br><span class="line">&#125;</span><br><span class="line">return money</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">type CashContext struct &#123;</span><br><span class="line">strategy CashSuper</span><br><span class="line">&#125;</span><br><span class="line">func NewCashContext(acceptType string) (cashFactory CashContext) &#123;</span><br><span class="line">switch acceptType &#123;</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;wrong type&quot;)</span><br><span class="line">case &quot;normal&quot;:</span><br><span class="line">cashFactory.strategy = CashNormal&#123;&#125;</span><br><span class="line">case &quot;0.8rebate&quot;:</span><br><span class="line">cashFactory.strategy = CashRebate&#123;moneyRebate: 0.8&#125;</span><br><span class="line">case &quot;300return100&quot;:</span><br><span class="line">cashFactory.strategy = CashReturn&#123;300, 100&#125;</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">func (cashFactory CashContext) Accept(money float64) float64 &#123;</span><br><span class="line">return cashFactory.strategy.Accept(money)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则</title>
      <link href="/2018/08/07/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2018/08/07/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>设计原则则是设计模式所遵循的规则，设计模式就是实现了这些原则，从而达到了代码复用、增加可维护性的目的。</p><a id="more"></a><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>一个类，只有一个引起它变化的原因。应该只有一个职责。</p><ul><li><p>问题由来：类T负责两个不同的职责P1和P2。由于职责P1需要发生改变而需要修改T类，就有可能导致原来运行正常的职责P2功能发生故障。</p></li><li><p>解决方法：遵循单一职责原则。分别建立新的类来对应相应的职责；这样就能避免修改类时影响到其他的职责；</p></li></ul><p>每一个职责都是变化的一个轴线，如果一个类有一个以上的职责，这些职责就耦合在了一起。这会导致脆弱的设计。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起，会影响复用性。</p><p>例：要实现逻辑和界面的分离。</p><p>优点：类的复杂性将会降低，可读性将会大大提高，维护性也会提高。</p><h2 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h2><p>软件实体应该是可扩展，而不可修改的。也就是说，对扩展是开放的，而对修改是封闭的。</p><ul><li><p>对扩展开放</p><ul><li>意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li></ul></li><li><p>对修改封闭</p><ul><li>意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</li></ul></li><li><p>封装变化，是实现开放封闭原则的重要手段，对于经常发生变化的状态一般将其封装为一个抽象。</p></li><li><p>拒绝滥用抽象，只将经常变化的部分进行抽象，这种经验可以从设计模式的学习与应用中获得。</p></li></ul><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>子类可以扩展父类的功能，但不能改变父类原有的功能</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li></ul><h2 id="最少知识原则"><a href="#最少知识原则" class="headerlink" title="最少知识原则"></a>最少知识原则</h2><p>最少知识原则又叫迪米特法则。核心思想是：低耦合、高内聚</p><p>一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。也就是说一个软件实体应当尽可能少的与其他实体发生相互作用。这样，当一个模块修改时，就会尽量少的影响其他的模块，扩展会相对容易，这是对软件实体之间通信的限制，它要求限制软件实体之间通信的宽度和深度。</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上，否则将会造成接口污染；类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是最小接口，则类B和类D必须去实现它们不需要的方法；</p><p>原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少；就是说，我们要为每个类建立专用的接口，而不要试图去建立一个庞大的接口供所有依赖它的类去调用；</p><ul><li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li><li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ul><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>核心思想是面向接口编程</p><p>问题由来：类A直接依赖类B，假如要将类A改为依赖类C，则必须通过修改类A的代码来完成；这种场景下，类A一般是高层模块，负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原则操作；假如修改类A，会给程序带来不必要的风险。</p><p>解决方案：将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I来间接与类B和类C发生联系，则会降低修改类A的几率；</p><ul><li>低层模块尽量都要有抽象类或接口，或者两者都有。</li><li>变量的声明类型尽量是抽象类或接口。</li><li>使用继承时遵循里氏替换原则。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="/2018/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>工厂模式是对象的生产器，解耦用户对具体的依赖。通过封闭、继承、多态把程序的耦合度降低，使程序更加灵活，容易修改，并易于复用。简单工厂模式中，各种运算方法类实现了运算接口，在业务上如果想添加一种算法方法，只需要增加一个实现接口的类，并且在工厂的类型中添加一个判断。这种设计适合用于业务逻辑并不多的情况，如果业务逻辑非常多，那么工作累就是一个很长的swuth…case结构这时候使用工厂模式会比较合适。</p><a id="more"></a><h2 id="主要类"><a href="#主要类" class="headerlink" title="主要类"></a>主要类</h2><ul><li>base - interface</li><li>concreteA - concrete class A</li><li>concreteB - concrete class B    </li><li>factory - in: choice; out: base</li></ul><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>工厂类中包含了必要的逻辑判断，根据客户端的选择条件实例化相应的类，对于客户端来说，去除了与具产品的依赖</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">设计一个计算器</span><br><span class="line">*/</span><br><span class="line">//Operation 操作接口</span><br><span class="line">type Operation interface &#123;</span><br><span class="line">SetNumber(float64, float64)</span><br><span class="line">GetResult() float64</span><br><span class="line">&#125;</span><br><span class="line">//BaseOperation 基础类</span><br><span class="line">type BaseOperation struct &#123;</span><br><span class="line">Operation</span><br><span class="line">NumberA float64</span><br><span class="line">NumberB float64</span><br><span class="line">&#125;</span><br><span class="line">func (bo *BaseOperation) SetNumber(numberA, numberB float64) &#123;</span><br><span class="line">bo.NumberA = numberA</span><br><span class="line">bo.NumberB = numberB</span><br><span class="line">&#125;</span><br><span class="line">//OperationAdd 加法运算</span><br><span class="line">type OperationAdd struct &#123;</span><br><span class="line">BaseOperation</span><br><span class="line">&#125;</span><br><span class="line">func (oa OperationAdd) GetResult() float64 &#123;</span><br><span class="line">return oa.NumberA + oa.NumberB</span><br><span class="line">&#125;</span><br><span class="line">//OperationSub 减法运算类</span><br><span class="line">type OperationSub struct &#123;</span><br><span class="line">BaseOperation</span><br><span class="line">&#125;</span><br><span class="line">func (os OperationSub) GetResult() float64 &#123;</span><br><span class="line">return os.NumberA - os.NumberB</span><br><span class="line">&#125;</span><br><span class="line">    //OperationFactory 工厂类</span><br><span class="line">type OperationFactory struct&#123;&#125;</span><br><span class="line">func (of OperationFactory) CreateOperation(oper string) Operation &#123;</span><br><span class="line">switch oper &#123;</span><br><span class="line">default:</span><br><span class="line">return nil</span><br><span class="line">case &quot;+&quot;:</span><br><span class="line">return new(OperationAdd)</span><br><span class="line">case &quot;-&quot;:</span><br><span class="line">return new(OperationSub)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//OperationUsage 工厂操作</span><br><span class="line">func OperationUsage() &#123;</span><br><span class="line">factory := new(OperationFactory)</span><br><span class="line">operation := factory.CreateOperation(&quot;+&quot;)</span><br><span class="line">operation.SetNumber(1, 2)</span><br><span class="line">fmt.Printf(&quot;this is add operation, 1+2=%v\n&quot;, operation.GetResult())</span><br><span class="line">operation = factory.CreateOperation(&quot;-&quot;)</span><br><span class="line">operation.SetNumber(2, 1)</span><br><span class="line">fmt.Printf(&quot;this is sub operation, 2-1=%v\n&quot;, operation.GetResult())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">设计一个工厂来生产各种厂商的手机</span><br><span class="line">其中初始的厂商有小米，苹果，华为</span><br><span class="line">*/</span><br><span class="line">//Phone interface</span><br><span class="line">type Phone interface &#123;</span><br><span class="line">ShowBrand()</span><br><span class="line">&#125;</span><br><span class="line">//IPhone apple</span><br><span class="line">type IPhone struct &#123;</span><br><span class="line">&#125;</span><br><span class="line">func (phone IPhone) ShowBrand() &#123;</span><br><span class="line">fmt.Println(&quot;[Phone Brand]: Apple&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//HPhone huawei</span><br><span class="line">type HPhone struct &#123;</span><br><span class="line">&#125;</span><br><span class="line">func (phone HPhone) ShowBrand() &#123;</span><br><span class="line">fmt.Println(&quot;[Phone Brand]: Huawei&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//XPhone xiaomi</span><br><span class="line">type XPhone struct &#123;</span><br><span class="line">&#125;</span><br><span class="line">func (phone XPhone) ShowBrand() &#123;</span><br><span class="line">fmt.Println(&quot;[Phone Brand]: Xiaomi&quot;)</span><br><span class="line">&#125;</span><br><span class="line">type PhoneFactory struct&#123;&#125;</span><br><span class="line">func (factory PhoneFactory) CreatePhone(brand string) Phone &#123;</span><br><span class="line">switch brand &#123;</span><br><span class="line">default:</span><br><span class="line">return nil</span><br><span class="line">case &quot;HW&quot;:</span><br><span class="line">return new(HPhone)</span><br><span class="line">case &quot;XM&quot;:</span><br><span class="line">return new(XPhone)</span><br><span class="line">case &quot;PG&quot;:</span><br><span class="line">return new(IPhone)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">func PhoneUsage() &#123;</span><br><span class="line">factory := PhoneFactory&#123;&#125;</span><br><span class="line">phone := factory.CreatePhone(&quot;HW&quot;)</span><br><span class="line">phone.ShowBrand()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">OperationUsage()</span><br><span class="line">PhoneUsage()</span><br><span class="line">&#125;</span><br><span class="line">result :</span><br><span class="line">this is add operation, 1+2=3</span><br><span class="line">this is sub operation, 2-1=1</span><br><span class="line">[Phone Brand]: Huawei</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序</title>
      <link href="/2018/08/03/%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/03/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>思路分析：在要排序的切片中，对当前还未排好的序列，从前往后对相邻的两个元素依次进行比较和调整，让较大的数往下沉，较小的往上冒。即，每当两相邻的元素比较后发现它们的排序与排序要求相反时，就将它们互换。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var sli = []int&#123;1, 43, 54, 62, 21, 66, 32, 78, 36, 76, 39&#125;</span><br><span class="line"></span><br><span class="line">func bubbleSort(sli []int) []int &#123;</span><br><span class="line">len := len(sli)</span><br><span class="line">//该层循环控制 需要冒泡的轮数</span><br><span class="line">for i := 1; i &lt; len; i++ &#123;</span><br><span class="line">//该层循环用来控制每轮 冒出一个数 需要比较的次数</span><br><span class="line">for j := 0; j &lt; len-1; j++ &#123;</span><br><span class="line">if sli[i] &lt; sli[j] &#123;</span><br><span class="line">sli[i], sli[j] = sli[j], sli[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sli</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">res := bubbleSort(sli)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>思路分析：在要排序的切片中，选出最小的一个元素与第一个位置的元素交换。然后在剩下的元素当中再找最小的与第二个位置的元素交换，如此循环到倒数第二个元素和最后一个元素比较为止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var sli = []int&#123;1, 43, 54, 62, 21, 66, 32, 78, 36, 76, 39&#125;</span><br><span class="line"></span><br><span class="line">func selectSort(sli []int) []int &#123;</span><br><span class="line">//双重循环完成，外层控制轮数，内层控制比较次数</span><br><span class="line">len := len(sli)</span><br><span class="line">for i := 0; i &lt; len-1; i++ &#123;</span><br><span class="line">//先假设最小的值的位置</span><br><span class="line">k := i</span><br><span class="line">for j := i + 1; j &lt; len; j++ &#123;</span><br><span class="line">//sli[k] 是当前已知的最小值</span><br><span class="line">if sli[k] &gt; sli[j] &#123;</span><br><span class="line">//比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。</span><br><span class="line">k = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//已经确定了当前的最小值的位置，保存到 k 中。如果发现最小值的位置与当前假设的位置 i 不同，则位置互换即可。</span><br><span class="line">if k != i &#123;</span><br><span class="line">sli[k], sli[i] = sli[i], sli[k]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sli</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>思路分析：在要排序的一切片中，假设前面的元素已经是排好顺序的，现在要把第n个元素插到前面的有序切片中，使得这n个元素也是排好顺序的。如此反复循环，直到全部排好顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var sli = []int&#123;1, 43, 54, 62, 21, 66, 32, 78, 36, 76, 39&#125;</span><br><span class="line"></span><br><span class="line">func insertSort(sli []int) []int &#123;</span><br><span class="line">len := len(sli)</span><br><span class="line">for i := 0; i &lt; len; i++ &#123;</span><br><span class="line">tmp := sli[i]</span><br><span class="line">//内层循环控制，比较并插入</span><br><span class="line">for j := i - 1; j &gt;= 0; j-- &#123;</span><br><span class="line">if tmp &lt; sli[j] &#123;</span><br><span class="line">//发现插入的元素要小，交换位置，将后边的元素与前面的元素互换</span><br><span class="line">sli[j+1], sli[j] = sli[j], tmp</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//如果碰到不需要移动的元素，则前面的就不需要再次比较了。</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sli</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">res := insertSort(sli)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>思路分析：选择一个基准元素，通常选择第一个元素或者最后一个元素。通过一趟扫描，将待排序列分成两部分，一部分比基准元素小，一部分大于等于基准元素。此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var sli = []int&#123;1, 43, 54, 62, 21, 66, 32, 78, 36, 76, 39&#125;</span><br><span class="line"></span><br><span class="line">func quickSort(sli []int) []int &#123;</span><br><span class="line">//先判断是否需要继续进行</span><br><span class="line">len := len(sli)</span><br><span class="line">if len &lt;= 1 &#123;</span><br><span class="line">return sli</span><br><span class="line">&#125;</span><br><span class="line">//选择第一个元素作为基准</span><br><span class="line">base_num := sli[0]</span><br><span class="line">//遍历除了标尺外的所有元素，按照大小关系放入左右两个切片内</span><br><span class="line">//初始化左右两个切片</span><br><span class="line">left_sli := []int&#123;&#125;  //小于基准的</span><br><span class="line">right_sli := []int&#123;&#125; //小于基准的</span><br><span class="line">for i := 1; i &lt; len; i++ &#123;</span><br><span class="line">if base_num &gt; sli[i] &#123;</span><br><span class="line">//放入左边切片</span><br><span class="line">left_sli = append(left_sli, sli[i])</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//放入右边切片</span><br><span class="line">right_sli = append(right_sli, sli[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//再分别对左边和右边的切片进行相同的排序处理方式递归调用这个函数</span><br><span class="line">left_sli = quickSort(left_sli)</span><br><span class="line">right_sli = quickSort(right_sli)</span><br><span class="line"></span><br><span class="line">//合并</span><br><span class="line">left_sli = append(left_sli, base_num)</span><br><span class="line">return append(left_sli, right_sli...)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">res := quickSort(sli)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2018/08/02/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2018/08/02/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>回顾整理二叉树遍历相关内容。 对于二叉树而言，其遍历有两种方式，一种是深度优先，即先优先向下进行遍历，一种是广度优先，逐层向下遍历。</p><a id="more"></a><h2 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Tree struct &#123;</span><br><span class="line">Val   int</span><br><span class="line">Left  *Tree</span><br><span class="line">Right *Tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><p>Deepth-First-Search DFS， 对于深度优先而言，又有三种方式，即前序，中序和后序。前中后序之间的前中后，指的是根结点的位置。</p><h3 id="前序递归"><a href="#前序递归" class="headerlink" title="前序递归"></a>前序递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func PreOrder(root *Tree) []int &#123;</span><br><span class="line">    var result []int</span><br><span class="line">    if root == nil &#123;</span><br><span class="line">          return result</span><br><span class="line">    &#125;</span><br><span class="line">    result = append(result, root.Val)</span><br><span class="line">    result = append(result, PreOrder(root.Left)...)</span><br><span class="line">    result = append(result, PreOrder(root.Right)...)</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前序非递归"><a href="#前序非递归" class="headerlink" title="前序非递归"></a>前序非递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func PreOrderNonRecursive(root *Tree) []int &#123;</span><br><span class="line">var result []int</span><br><span class="line">if root == nil &#123;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">stack := list.New()</span><br><span class="line">p := root</span><br><span class="line">for p != nil || stack.Len() != 0 &#123;</span><br><span class="line">for p != nil &#123;</span><br><span class="line">result = append(result, p.Val)</span><br><span class="line">stack.PushBack(p)</span><br><span class="line">p = p.Left</span><br><span class="line">&#125;</span><br><span class="line">if stack.Len() != 0 &#123;</span><br><span class="line">node := stack.Back()</span><br><span class="line">stack.Remove(node)</span><br><span class="line">p = node.Value.(*Tree).Right</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序递归"><a href="#中序递归" class="headerlink" title="中序递归"></a>中序递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func InOrder(root *Tree) []int &#123;</span><br><span class="line">var result []int</span><br><span class="line">if root == nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">result = append(result, PreOrder(root.Left)...)</span><br><span class="line">result = append(result, root.Val)</span><br><span class="line">result = append(result, PreOrder(root.Right)...)</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序非递归"><a href="#中序非递归" class="headerlink" title="中序非递归"></a>中序非递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">func InOrderNonRecursive(root *Tree) []int &#123;</span><br><span class="line">var result []int</span><br><span class="line">if root == nil &#123;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">stack := list.New()</span><br><span class="line">p := root</span><br><span class="line">for p != nil || stack.Len() != 0 &#123;</span><br><span class="line">for p != nil &#123;</span><br><span class="line">stack.PushBack(p)</span><br><span class="line">p = p.Left</span><br><span class="line">&#125;</span><br><span class="line">if stack.Len()  != 0 &#123;</span><br><span class="line">node := stack.Back()</span><br><span class="line">stack.Remove(node)</span><br><span class="line">result = append(result, node.Value.(*Tree).Val)</span><br><span class="line">p = node.Value.(*Tree).Right</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序递归"><a href="#后序递归" class="headerlink" title="后序递归"></a>后序递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func PostOrder(root *Tree) []int &#123;</span><br><span class="line">var result []int</span><br><span class="line">if root == nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">result = append(result, PreOrder(root.Left)...)</span><br><span class="line">result = append(result, PreOrder(root.Right)...)</span><br><span class="line">result = append(result, root.Val)</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序非递归"><a href="#后序非递归" class="headerlink" title="后序非递归"></a>后序非递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">func PostOrderNonRecursive(root *Tree) []int &#123;</span><br><span class="line">var result []int</span><br><span class="line">if root == nil &#123;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">stack := list.New()</span><br><span class="line">p := root</span><br><span class="line">lastVisit := new(Tree)</span><br><span class="line">for p != nil || stack.Len() != 0 &#123;</span><br><span class="line">for p != nil &#123;</span><br><span class="line">stack.PushBack(p)</span><br><span class="line">p = p.Left</span><br><span class="line">&#125;</span><br><span class="line">if stack.Len() != 0 &#123;</span><br><span class="line">node := stack.Back()</span><br><span class="line">if node.Value.(*Tree).Right != nil &amp;&amp; lastVisit != node.Value.(*Tree).Right &#123;</span><br><span class="line">p = node.Value.(*Tree).Right</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">result = append(result, node.Value.(*Tree).Val)</span><br><span class="line">stack.Remove(node)</span><br><span class="line">lastVisit = node.Value.(*Tree)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>Breadth-First-Search BFS 或者说是 Level Traversal，对于广度优先而言，其基于队列的数据结构，可以很简单的实现出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">func LevelTraversal(root *Tree) []int &#123;</span><br><span class="line">var result []int</span><br><span class="line">if root == nil &#123;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br><span class="line">queue := list.New()</span><br><span class="line">queue.PushBack(root)</span><br><span class="line">for queue.Len() != 0 &#123;</span><br><span class="line">node := queue.Front()</span><br><span class="line">nTree := node.Value.(*Tree)</span><br><span class="line">queue.Remove(node)</span><br><span class="line">if nTree == nil &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">result = append(result, nTree.Val)</span><br><span class="line">queue.PushBack(nTree.Left)</span><br><span class="line">queue.PushBack(nTree.Right)</span><br><span class="line">&#125;</span><br><span class="line">return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意在for循环里，不能直接用 node.Value.(*Tree) == nil 来判断，因为interface特性，会认为其不为 nil，哪怕nTree为nil。 详细内容，可以参考 go interface机制，这里侧重算法，不再细讲。</p><ul><li>总结<ul><li>二叉树遍历分为两种，一种是深度优先，一种是广度优先</li><li>深度优先分为前，中，后序三种实现方式</li><li>深度优先可以使用递归和非递归两种方式实现</li><li>深度优先主要借助栈来实现</li><li>广度优先主要借助队列来实现</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法学习步骤</title>
      <link href="/2018/06/13/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4/"/>
      <url>/2018/06/13/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p>算法可以说是解决问题的步骤。<br>按常理来说学习算法需要先掌握一定的数据结构。但因为数组也是一大数据结构，而且也是非常常用的东西，所以在最初，做一些用数组解决的问题（其实java里的数据结构也都是基于数组和类来实现各种数据结构）。</p><a id="more"></a><p>比如一维数组里：计算两个数组的交集，用数组实现约瑟夫环等等；二维数组里（平面坐标初级）：扫雷，边缘检测问题，生命游戏等等。之后进行对数据结构的掌握，会了常用数据结构之后，就可以进行深入的算法研究了。<br>所以这里的建议的顺序是：<br>熟习数组相关操作<br>熟习字符串相关操作<br>认识基础数据结构：线性表、顺序表、链表、栈、队列、树、哈希表、图等。并且自己实现以上数据结构<br>掌握使用提供的数据结构API。<br>排序算法、查找算法。<br>四个基本算法思想：穷举，递推，递归，概率。<br>数学问题，数论问题，数据结构问题，几何问题，字符串问题，大数运算问题。<br>五大常用算法：分治、动态规划（DP），贪心，回溯，分支界定。<br>多看算法题和算法书。</p><h2 id="详细内容"><a href="#详细内容" class="headerlink" title="详细内容"></a>详细内容</h2><p>注：这里都是用java语言作为例子解答代码进行讲解，同时附带的也都是java的api使用说明，但其实算法对语言依赖性不大，重要的是思想。本文提供给大家一个学习方案作为参考。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>内容：熟习数组的常用操作，可以做一些基础题，可以上leetcode或者别的算法题网站，刷掉初级算法题库里的数组10几个题目，这样对一维和二维数组的掌握灵活度就比较高了。<br>一个比较典型的二维数组逻辑题目：<br>旋转二维数组：给定一个n×n的二维矩阵表示一个图像，输出将图像旋转90度的样子。（不要用另一个矩阵来旋转）<br>题目具体内容点击标题可以进去查看。<br>其他数组例题：<br>两个数组的交集，数组实现约瑟夫环，简易扫雷，生命游戏等等。<br>其他数组的操作大家可以自行去看看别的题，锻炼一下数组的运用思想。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>内容：字符串的操作，比如回文串判定、字符串翻转等等。同样建议上题库做一些相应练习。在java里对应的API：string，stringbuilder，stringbuffer。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>此章内容具体参照：java数据结构和他的API<br>内容：这一部分需要自己先去学习一遍数据结构，然后自己写出来。掌握之后，再去查看api文档，最后学会如何使用api里的数据结构写算法，下面介绍的主要是api的对应方式。<br>1、基础数组、线性表：<br>（1）数组：<br>API：Arrays。<br>（2）线性表：<br>API：ArrayList。<br>2、链表：<br>链表是以节点类为基础的，每个节点类有一个成员变量是下一个节点。<br>API：LinkedList。<br>3、集合（java）：<br>API：Collections。<br>这个接口提供了很多常用方法，具体如何使用可以参照帮助文档。<br>4、向量：（可增长数组）<br>API：Vector接口提供方法与数组类似，具体查看API帮助手册。<br>5、栈：<br>自己先基于数组去实现。<br>API：Stack接口提供查看，移除，压入，查找，判空操作<br>6、队列、双端队列、优先队列：<br>（1）队列：<br>API：Queue。<br>（2）双端队列：<br>API：Deque。<br>（3）优先队列：<br>   API：PriorityQueue档。<br>7、哈希表（映射表）：<br>API：<br>（1）Hashmap提供了键—值对应的功能。<br>（2）TreeMap提供了可排序的映射表。<br>8、树：<br>树没有api，可以用上面学过的东西去实现它。<br>9、图：<br>图也是没有api的，用之前学过的结构可以构造。</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>内容：在排序里，需要了解这九大排序算法：<br>1、冒泡排序：每两个交换，每轮吧最大的放后面；<br>2、选择排序：每轮选出最大的放后面；<br>3、插入排序：一个线性表，一开始只有一个元素，加一个排一个；<br>4、希尔排序：<br>5、快速排序：<br>6、堆排序：<br>7、合并排序：<br>8、基数排序：<br>9、计数排序：</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>这个阶段要了解到查找算法在平时的应用，最基础的是直接查找和二分查找，但是有时候在不同场景会有一些优化。<br>1、二分法：对排序好的数组用，Collections提供了此方法<br>2、二分法的各种优化搜索：<br>3、数据结构中的查找：<br>（1）顺序表：同数组，序号或者关键字顺序、二分查找。<br>（2）链表：关键字查找，只能一个个往后找，返回引用。<br>（3）树：树或者二叉树遍历一个个找，二叉搜索树可以根据大小找，原理和二分法一样。平衡二叉树同而搜索树，红黑树效率高。<br>（4）图：深度优先遍历查找。</p><h3 id="4个基本算法思想"><a href="#4个基本算法思想" class="headerlink" title="4个基本算法思想"></a>4个基本算法思想</h3><p>此章节具体参照：4个基本算法思想：穷举、递推、递归、概率<br>内容：这4个基本算法思想是解决基础问题的很实用的方法。这里开始其实就已经是把所有需要的知识准备好了，之后就要开始解题了。<br>1、穷举：暴力破解，n层for循环。枚举每一种可能。<br>2、递推：简单的动态规划，根据递推公式，累加。<br>3、普通递归：化解问题逐渐变小（从n到1）<br>4、概率：使用random数量足够大的时候，得到近似结果。</p><h3 id="数学问题，数论问题，数据结构问题，几何问题，字符串问题，大数运算问题："><a href="#数学问题，数论问题，数据结构问题，几何问题，字符串问题，大数运算问题：" class="headerlink" title="数学问题，数论问题，数据结构问题，几何问题，字符串问题，大数运算问题："></a>数学问题，数论问题，数据结构问题，几何问题，字符串问题，大数运算问题：</h3><p>内容：这一块需要了解的是零散问题的应用。每一块我举几个例子，推荐大家还是上刷题网站吧零散的题给刷掉，不推荐直接做各个算法难题，先做这些零散题会对之后系统做算法有一些帮助。<br>以下我诺列一些题目，大家可以自己查查，刷题网站上也有。<br>1、数学问题：<br>罗马数字转换<br>Math函数的应用（自行查看api帮助文档）。<br>保留小数点的操作：例如String.format（“%.2f”,string）<br>2、数据结构问题：<br>约瑟夫环：具体点击这里<br>括号匹配：具体点击这里<br>链表排序、最短路径等等。<br>3、数论问题：<br>素数、完全数为代表的问题。<br>4、几何问题：<br>java里有API：抽象类shape——具体类line2d，Point2d提供了一些集合方法。<br>5、大数运算问题：<br>API：BigInteger，提供加减乘除模，大小比较，转化等运算。<br>6、字符串问题：<br>API：String大致包含这些方法：是否包含，比较（可不考虑大小写），第一次出现索引（前后），两个字符串的某个区域是否相等（regionmatches），replace替换，split（[，]）分割，substring删减，tochararray变成字符数组，tolow/toup，trim忽略前后空白，valueof把别的转换成字符串。</p><h3 id="五大常用算法"><a href="#五大常用算法" class="headerlink" title="五大常用算法"></a>五大常用算法</h3><p>五大算法：分治，回溯，贪心，DP（动态规划），分支界定。<br>内容在这一块是需要重点看看的，前4个是重点，也有非常多的经典例题。这一部分还是比较需要时间的，以下仅仅是介绍，点开链接具有详细的每个算法讲解。</p><p>1、分治法<br>首先看一下二分搜索：一串数，取中间的数并且平分两半，如果比中间数大，就去上半部分找，然后再两半……这样查找就是分治思想：把一个问题分解成若干个一样的小块。<br>具体详情：分治算法——五大常用算法之一<br>基本概念：<br>把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题。直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</p><p>2、动态规划法<br>具体详情：动态规划——五大常用算法之一<br>基本概念：<br>动态规划（DP）就是：每走一步，都会根据之前的情况来决定这一步的走向，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。使用动态规划法一般会有一个递推公式（递推就是简单动态规划）。当然，最难找到的也是这个递推公式。</p><p>3、贪心算法<br>具体详情：贪心算法——五大常用算法之一<br>基本概念：<br>在对问题求解时，总是做出在当前看来是最好的选择。不从整体最优上加以考虑，所做出的仅是在某种意义上的局部最优解。<br>贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。<br>所以对所采用的贪心策略一定要仔细分析其是否满足无后效性。</p><p>4、回溯算法<br>具体详情：回溯算法——五大常用算法之一<br>基本概念：<br>      回溯算法实际上一个类似枚举的搜索尝试过程（排列组合），主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。<br>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。<br>     许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p><p>5、分支界定<br>这个算法个人没有仔细研究，可能是因为学的较浅没有经常用到。下面内容做一个参考：<br>基本描述<br>    类似于回溯法，也是一种在问题的解空间树T上搜索问题解的算法。但在一般情况下，分支限界法与回溯法的求解目标不同。回溯法的求解目标是找出T中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即在某种意义下的最优解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习-grep命令</title>
      <link href="/2018/01/16/linux%E5%AD%A6%E4%B9%A0-grep%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/01/16/linux%E5%AD%A6%E4%B9%A0-grep%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p> grep（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p> <a id="more"></a><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p> testout.txt date 命令，每分钟执行一次的结果，共49622行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以前十行为例：</span><br><span class="line">2018年 12月 12日 星期三 14:53:01 CST</span><br><span class="line">2018年 12月 12日 星期三 14:54:01 CST</span><br><span class="line">2018年 12月 12日 星期三 14:55:01 CST</span><br><span class="line">2018年 12月 12日 星期三 14:56:01 CST</span><br><span class="line">2018年 12月 12日 星期三 14:57:01 CST</span><br><span class="line">2018年 12月 12日 星期三 14:58:01 CST</span><br><span class="line">2018年 12月 12日 星期三 14:59:01 CST</span><br><span class="line">2018年 12月 12日 星期三 15:00:01 CST</span><br><span class="line">2018年 12月 12日 星期三 15:01:01 CST</span><br><span class="line">2018年 12月 12日 星期三 15:02:01 CST</span><br></pre></td></tr></table></figure><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li><p>-c 计算符合范本样式的列数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep -c &quot;2018年 12月 14日&quot; testout.txt</span><br><span class="line">1440 #24*60=1440</span><br><span class="line">等同于：</span><br><span class="line">grep &quot;2018年 12月 14日&quot; testout.txt |wc -l</span><br></pre></td></tr></table></figure></li><li><p>-A&lt;显示列数&gt; 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep -A 0 &quot;2018年 12月 14日 星期五 23:00:01&quot; testout.txt</span><br><span class="line">2018年 12月 14日 星期五 23:00:01 CST</span><br><span class="line">grep -A 2 &quot;2018年 12月 14日 星期五 23:00:01&quot; testout.txt</span><br><span class="line">2018年 12月 14日 星期五 23:00:01 CST</span><br><span class="line">2018年 12月 14日 星期五 23:01:01 CST</span><br><span class="line">2018年 12月 14日 星期五 23:02:01 CST</span><br></pre></td></tr></table></figure></li><li><p>-C&lt;显示列数&gt;或-&lt;显示列数&gt; 除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep -C 2 &quot;2018年 12月 14日 星期五 23:00:01&quot; testout.txt</span><br><span class="line">2018年 12月 14日 星期五 22:58:01 CST</span><br><span class="line">2018年 12月 14日 星期五 22:59:01 CST</span><br><span class="line">2018年 12月 14日 星期五 23:00:01 CST</span><br><span class="line">2018年 12月 14日 星期五 23:01:01 CST</span><br><span class="line">2018年 12月 14日 星期五 23:02:01 CST</span><br></pre></td></tr></table></figure></li><li><p>-P 支持Perl正则表达式</p></li><li><p>-E 支持扩展正则表达式</p></li><li><p>-F 不支持正则表达式，将模式按照字面意思匹配</p></li><li><p>-e 匹配模板，多次使用模板之间关系为 ‘或’</p></li><li><p>-l 只列出含有匹配的文本行的文件的文件名，而不显示具体的匹配内容</p></li><li><p>-L 列出文件内容不符合指定的范本样式的文件名称。</p></li><li><p>-n 列出所有的匹配的文本行，并显示行号</p></li><li><p>-v 只显示不匹配的文本行</p></li><li><p>-R/-r 递归搜索，搜索当前目录和子目录</p></li><li><p>-q 不显示任何信息。</p></li><li><p>-h 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</p></li><li><p>-H 在显示符合范本样式的那一列之前，标示该列的文件名称。</p></li><li><p>-i/-y 忽略字符大小写的差别。</p></li><li><p>-w 只显示全字符合的列。</p></li><li><p>-s 不显示错误信息。</p></li><li><p>-x 整行内容完全匹配</p></li><li><p>-o 只输出文件中匹配到的部分。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统引论</title>
      <link href="/2017/08/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E8%AE%BA/"/>
      <url>/2017/08/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>操作系统（OS）是计算机上第一层软件，对硬件系统的首次扩充。主要作用管理好这些设备，提高利用率和吞吐量，并为用户和应用进程提供一个简单的接口，便于使用。</p><a id="more"></a> <hr><h2 id="操作系统的作用和目标"><a href="#操作系统的作用和目标" class="headerlink" title="操作系统的作用和目标"></a>操作系统的作用和目标</h2><h3 id="操作系统目标"><a href="#操作系统目标" class="headerlink" title="操作系统目标"></a>操作系统目标</h3><ul><li>方便性<ul><li>未配置OS的需要机器语言才能运行</li></ul></li><li>有效性<ul><li>提高系统资源利用率</li><li>提高系统吞吐量：合理组织计算机的工作流程，加速程序运行，缩短运行周期</li></ul></li><li>可扩充性<ul><li>可扩充性好坏与OS结构十分紧密联系 OS结构发展：无结构···模块化结构···层次结构···微内核结构（可以方便添加新的功能模块）</li></ul></li><li>开放性<ul><li>遵循世界标准规范，特别是遵循开放系统互连OSI国际标准</li></ul></li></ul><h3 id="操作系统作用"><a href="#操作系统作用" class="headerlink" title="操作系统作用"></a>操作系统作用</h3><ul><li>OS作为用户与计算机硬件系统之间的接口<ul><li>OS处于用户与计算机系统之间，用户通过OS来使用计算机系统</li><li>通过命令、系统调用、图标-窗口方式来完成通信</li></ul></li><li>OS作为计算机系统资源的管理者<ul><li>这些资源分为四大类：处理机、存储器、I/O设备、文件（数据和程序）</li><li>处理机 ： 用户分配和控制处理机</li><li>存储器 ： 主要负责内存分配和回收</li><li>I/O设备： 负责I/O设备的分配（回收）操作</li><li>文件管理： 用于实现对文件的存取、共享和保护</li></ul></li><li>OS 实现了对计算机资源的抽象<ul><li>完全无软件的计算机系统（裸机）</li><li>裸机上铺设I/O设备称为扩充器或虚拟机</li><li>I/O 设备实现对计算机硬件操作的第一层抽象</li><li>文件管理实现对计算机硬件操作的第二层抽象（功能更强的虚拟机）</li></ul></li></ul><h3 id="推动操作系统发展的主要动力"><a href="#推动操作系统发展的主要动力" class="headerlink" title="推动操作系统发展的主要动力"></a>推动操作系统发展的主要动力</h3><ul><li>不断提高计算机的利用率</li><li>方便用户</li><li>硬件的不断更新</li><li>计算机体系结构的不断发展</li><li>不断提出新的应用需求</li></ul><hr><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><h3 id="未配置操作系统的计算机系统"><a href="#未配置操作系统的计算机系统" class="headerlink" title="未配置操作系统的计算机系统"></a>未配置操作系统的计算机系统</h3><ul><li>人工操作方式<ul><li>人工操作穿孔的纸带（卡片）</li><li>缺点:<ul><li>用户独占全机</li><li>CPU等待人工操作</li><li>人工操作方式严重降低了计算机利用率</li></ul></li></ul></li><li>脱机输入/输出方式<ul><li>将原有纸带装入纸带输入机，在一台外围机的控制下把纸袋上的数据（程序）放到磁盘上</li><li>有点：<ul><li>减少CPU空闲时间</li><li>提高I/O的速度</li></ul></li></ul></li></ul><h3 id="单道批处理系统"><a href="#单道批处理系统" class="headerlink" title="单道批处理系统"></a>单道批处理系统</h3><ul><li><p>单道批处理系统的处理流程</p><ul><li>监督程序将磁带上的作业一个一个顺序执行</li></ul></li><li><p>单道批处理系统缺点</p><ul><li>系统中资源得不到重复利用</li></ul></li></ul><h3 id="多道批处理系统"><a href="#多道批处理系统" class="headerlink" title="多道批处理系统"></a>多道批处理系统</h3><ul><li>多道批处理系统处理流程<ul><li>用户提交作业在外存上，排成一个队列（后备队列），作业调度根据一定算法，一次取多个调入内存，减少CPU的空当时间</li></ul></li><li>多道批处理系统的缺点<ul><li>资源利用率高</li><li>系统吞吐量达<ul><li>CPU和其他资源保持“忙碌”状态</li><li>仅当作业完成、或运行不下去时在进行切换，系统开销小</li></ul></li><li>平均周转时间长</li><li>无交互能力</li></ul></li></ul><h3 id="多道批处理系统需要解决的问题"><a href="#多道批处理系统需要解决的问题" class="headerlink" title="多道批处理系统需要解决的问题"></a>多道批处理系统需要解决的问题</h3><ul><li>问题：<ul><li>处理机挣用问题</li><li>内存分配和保护问题</li><li>I/O 设备分配问题</li><li>文件的组织和管理问题</li><li>作业管理问题</li><li>用户与系统的接口问题</li></ul></li></ul><h3 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h3><ul><li><p>分时系统的引入</p><ul><li>人——机交互</li><li>共享主机</li><li>分时系统是指，在一台计算机上连接多个鼠标、显示器的终端所组成的系统，该系统运行多个用户同时访问，共享主机资源</li></ul></li><li><p>分时系统的关键问题</p><ul><li>及时接受</li><li>及时处理</li></ul></li><li><p>分时系统的特新</p><ul><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li></ul></li></ul><h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><ul><li><p>时间作为关键参数，收到某些信号“及时”、“实时”的反响</p></li><li><p>实时系统的类型</p><ul><li>工业控制系统</li><li>信息查询系统</li><li>多媒体系统</li><li>嵌入式系统</li></ul></li><li><p>实时任务类型</p><ul><li>周期性和非周期性实时任务</li><li>硬实时任务和软实时任务 （必须小于截至截止时间，不一定小于截止时间）</li></ul></li><li><p>实时系统与分时系统比较</p><ul><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li><li>可靠性</li></ul></li></ul><hr><h2 id="微机操系统作发展史"><a href="#微机操系统作发展史" class="headerlink" title="微机操系统作发展史"></a>微机操系统作发展史</h2><ul><li>单用户单任务操作系统</li><li>单用户多任务操作系统</li><li>多用户多任务操作系统</li></ul><hr><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><ul><li>并行<ul><li>两个或多个事件在同一时刻运行</li></ul></li><li>并发<ul><li>两个或多个事件在同一时间间隔内发生</li></ul></li></ul><h3 id="引入进程"><a href="#引入进程" class="headerlink" title="引入进程"></a>引入进程</h3><p>在属于同一个计算程序和I/O程序之间只能顺序执行，即只有在计算程序执行告一段落后，才允许I/O程序执行，反之在执行I/O操作时计算程序也不能执行。但在为计算程序和I/O程序分别建立一个进程后两个进程可以并发执行</p><ul><li>进程<ul><li>在系统中能够独立运行并作为资源分配的基本单位，它是由一组机器指令、数据、堆栈等组成的，是以独立的活动实体。多个进程之间可以并发执行和交换信息。</li></ul></li></ul><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><ul><li>共享与操作环境下的共享（含义不一致）<ul><li>共享<ul><li>某种资源能被大家使用</li></ul></li><li>操作系统环境下的共享（资源复用）<ul><li>指操作系统中的资源可供内存中多个并发执行的进程共同使用</li></ul></li></ul></li></ul><h3 id="互斥共享方式"><a href="#互斥共享方式" class="headerlink" title="互斥共享方式"></a>互斥共享方式</h3><p>系统中的某些资源虽然可以提供给多个进程（线程）使用，但在规定的时间内只有一个进程访问资源，为此建立了互斥访问</p><h3 id="同时访问方式"><a href="#同时访问方式" class="headerlink" title="同时访问方式"></a>同时访问方式</h3><p>系统中有一类资源允许同一时间由多个进程“同时”访问</p><p>并发和共享是多用户（多任务）OS的两个最基础的特征。</p><h2 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h2><h3 id="时分复用技术"><a href="#时分复用技术" class="headerlink" title="时分复用技术"></a>时分复用技术</h3><p>广泛利用时分复用技术来实现虚拟处理机、虚拟设备等，是资源利用率提高。原因：利用某设备为一个用户服务空闲时间又转去为其他用户服务，使得设备得到充分利用。</p><ul><li>虚拟处理技术</li><li>虚拟设备技术</li></ul><h3 id="空分复用技术"><a href="#空分复用技术" class="headerlink" title="空分复用技术"></a>空分复用技术</h3><p>将一个频率范围比较宽的信道划分为多个窄的信道（称为频带），其中的任何一个频带仅供一对用户通话。</p><hr><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><h3 id="处理机管理功能"><a href="#处理机管理功能" class="headerlink" title="处理机管理功能"></a>处理机管理功能</h3><ul><li><p>进程控制</p><ul><li>进程控制的主要功能也就是作为穿件进程、撤销（终止）已接收的进程，控制进程在运行时状态的转换</li></ul></li><li><p>进程同步</p><ul><li>进程互斥方式<ul><li>访问临界资源时采用互斥：为每一个临界资源配置一把锁（W），当锁打开时才可以访问，关闭时禁止访问</li></ul></li><li>进程同步<ul><li>多个进程去做一件事情，有同步机构对他们执行次序加以协调：信号量机制</li></ul></li></ul></li><li><p>进程通信</p><ul><li>由源进程利用发送消息命令直接将消息挂载到目标进程得到消息队列上，由目标进程利用接收命令消息队列中取出消息</li></ul></li><li><p>调度</p><ul><li><p>作业调度</p><ul><li>任务是从后备队列中按照一定的算法选择处若干个作业，为他们分配运行所需资源，再讲这些作业调入内存后， 分别为他们建立进程，使它们成为可能获得处理机的就绪，并将它们插入到就绪队列中</li></ul></li><li><p>进程调度</p><ul><li>从进程的就绪队列中按照一定的算法选出一个进程，将处理机分配给他，并为他设置运行现场，使其投入执行</li></ul></li></ul></li></ul><h3 id="存储器管理功能"><a href="#存储器管理功能" class="headerlink" title="存储器管理功能"></a>存储器管理功能</h3><p>功能：<br>为多道程序的运行提供良好的环境，提高存储器利用率，方便用户使用，从逻辑上扩充内存。</p><ul><li><p>内存分配回收</p><ul><li>为每道程序分配内存空间，使他们“各得其所”</li><li>提高存储器利用率，减少不可用的内存空间</li><li>允许正在运行的程序申请附加内存空间，适应程序动态增长</li><li>OS 内存分配动态和静态两种方式：<ul><li>静态<ul><li>每个作业的内存空间在装入时确定，运行期间不能申请新的空间，不能在内存中移动</li></ul></li><li>动态<ul><li>每个作业的内存空间在装入时确定，运行期间可以继续申请新的空间，以适应程序数据的动态增长，运行在作业内存中移动</li></ul></li></ul></li></ul></li><li><p>内存保护</p><ul><li>确保每道用户程序都仅能在自己的空间内运行，彼此互不干扰</li><li>觉不允许用户程序访问操作系统的程序和数据，也不允许用户程序转移到非共享的其他用户程序中执行</li><li>内存保护机制设置两个界限寄存器<ul><li>对每条指令所要访问的地址进行检查，如发生越界，发出越界中断请求，停止程序的执行</li></ul></li></ul></li><li><p>地址映射</p><ul><li>逻辑空间中的逻辑地址转换为空间中与之对应的物理地址</li></ul></li><li><p>内存扩充</p><ul><li>借助于虚拟存储技术，从逻辑上扩充内存容量，让用户感觉到内存容量比实际大的多，让用户程序能并发运行</li><li>请求调入功能</li><li>置换功能：将不需要挂起至硬盘，需要的转入内存</li></ul></li></ul><h3 id="设备管理功能"><a href="#设备管理功能" class="headerlink" title="设备管理功能"></a>设备管理功能</h3><p>主要任务：<br>    完成用户进程提出的I/O请求，为用户分配所需的I/O设备，并完成指定的I/O操作<br>    提高CPU和I/O的利用率，提高I/O速度，方便用户使用I/O设备</p><ul><li>缓存管理<ul><li>I/O设备和CPU设备之间引入缓存，有效的缓和CPU和I/O设备速度不匹配的矛盾，提高CPU的利用率，进而提高系统吞吐量</li><li>常见缓存机制 都由 OS缓存机制管理：<ul><li>单缓存机制</li><li>能够实现双向同时传送数据的双缓存机制</li><li>能够供多个设备同时使用的公共缓存池机制</li></ul></li></ul></li><li>设备分配<ul><li>根据用户进程的I/O请求、系统现有资源情况及按照某种设备分配策略，为之分配所需设备</li></ul></li><li>设备处理<ul><li>实现CPU和设备控制器之间的通信</li></ul></li></ul><h3 id="文件管理功能"><a href="#文件管理功能" class="headerlink" title="文件管理功能"></a>文件管理功能</h3><p>功能：<br>    对用户文件和系统文件进行方便用户使用，并保证文件安全性。</p><ul><li>文件存储空间管理<ul><li>为每个文件分配必要的空间，提高外存利用率，进而提高文件系统的存、取速度。为此操作系统设置相应数据结构，堆内存空间进行分配和回收</li></ul></li><li>目录管理</li><li>文件读写管理和保护<ul><li>文件读写管理</li><li>文件保护</li></ul></li></ul><h3 id="操作系统与用户的接口"><a href="#操作系统与用户的接口" class="headerlink" title="操作系统与用户的接口"></a>操作系统与用户的接口</h3><ul><li>用户接口<ul><li>联机用户接口</li><li>脱机用户接口</li><li>图形用户接口</li></ul></li><li>程序接口</li></ul><h3 id="现代操作系统新功能"><a href="#现代操作系统新功能" class="headerlink" title="现代操作系统新功能"></a>现代操作系统新功能</h3><ul><li>系统安全<ul><li>认证技术</li><li>密码技术</li><li>访问控制技术</li><li>反病毒技术</li></ul></li><li>网络的功能和服务<ul><li>网络通信</li><li>资源管理</li><li>应用互操作</li></ul></li><li>支持多媒体<ul><li>接纳控制功能</li><li>实时调度</li><li>多媒体文件的存储</li></ul></li></ul><hr><h2 id="OS的设计"><a href="#OS的设计" class="headerlink" title="OS的设计"></a>OS的设计</h2>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2017/08/04/Linux/"/>
      <url>/2017/08/04/Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="LINUX常用命令（基础）"><a href="#LINUX常用命令（基础）" class="headerlink" title="LINUX常用命令（基础）"></a>LINUX常用命令（基础）</h2><ul><li><p>man 对你熟悉或不熟悉的命令提供帮助解释</p><ul><li><p>eg:man ls 就可以查看ls相关的用法</p><a id="more"></a></li><li><p>注：按q键或者ctrl+c退出，在linux下可以使用ctrl+c终止当前程序运行。</p></li></ul></li><li><p>ls 查看目录或者文件的属*，列举出任一目录下面的文件</p><ul><li>eg: ls /usr/man</li><li>ls -l</li><li>d表示目录(directory)，如果是一个”-“表示是文件，如果是l则表示是一个连接文件(link)</li><li>表示文件或者目录许可权限.分别用可读(r)，可写(w)，可运行(x)。</li></ul></li><li><p>cp 拷贝文件</p><ul><li>eg: cp filename1 filename2 //把filename1拷贝成filename2</li><li>cp 1.c netseek/2.c //将1.c拷到netseek目录下命名为2.c</li></ul></li><li><p>rm 删除文件和目录</p><ul><li>eg: rm 1.c //将1.c这个文件删除</li></ul></li><li><p>mv 移走目录或者改文件名</p><ul><li>eg: mv filename1 filename2 //将filename1 改名为filename2</li><li>mv qib.tgz ../qib.tgz //移到上一级目录</li></ul></li><li><p>cd 改变当前目录 pwd 查看当前所在目录完整路径</p><ul><li>eg: pwd //查看当前所在目录路径</li><li>cd netseek //进入netseek这个目录</li><li>cd //退出当前目录</li></ul></li><li><p>cat，more命令</p><ul><li>将某个文件的内容显示出来。两个命令所不同的是:cat把文件内容一直打印出来，而 more则分屏显示</li><li>eg; cat&gt;1.c //就可以把代码粘帖到1.c文件里，按ctrl+d 保存代码。</li><li>cat 1.c 或more 1.c //都可以查看里面的内容。</li><li>gcc -o 1 1.c //将1.c编译成.exe文件，我们可以用此命编译出代码。</li></ul></li><li><p>chmod 命令 权限修改 用法：chmod 一位8进制数 filename。</p><ul><li>eg: chmod u+x filenmame //只想给自己运行，别人只能读</li><li>//u表示文件主人， g 表示文件文件所在组。 o 表示其他人 ;r 表可读，w 表可写，x 表可以运行</li><li>chmod g+x filename //同组的人来执行</li></ul></li><li><p>clear，date命令</p><ul><li>clear:清屏，相当与DOS下的cls;date:显示当前时间。</li></ul></li><li><p>mount 加载一个硬件设备</p><ul><li>用法:mount [参数] 要加载的设备 载入点</li><li>eg: mount /dev/cdrom</li><li>cd /mnt/cdrom //进入光盘目录</li></ul></li><li><p>su 在不退出登陆的情况下，切换到另外一个人的身份</p><ul><li>用法: su -l 用户名(如果用户名缺省，则切换到root状态)</li><li>eg:su -l netseek (切换到netseek这个用户，将提示输入密码)</li></ul></li><li><p>whoami，whereis，which，id</p><ul><li>//whoami:确认自己身份</li><li>//whereis:查询命令所在目录以及帮助文档所在目录</li><li>//which:查询该命令所在目录(类似whereis)</li><li>//id:打印出自己的UID以及GID。(UID:用户身份唯一标识。GID:用户组身份唯一标识。每一个用户只能有一个唯一的UID和 GID)</li><li>eg: whoami //显示你自已登陆的用户名</li><li>whereis bin 显示bin所在的目录，将显示为：/usr/local/bin</li><li>which bin</li></ul></li><li><p>grep，find</p><ul><li>grep:文本内容搜索;find:文件或者目录名以及权限属主等匹配搜索</li><li>eg: grep success * 　　 /*查找当前目录下面所有文件里面含有success字符的文件</li></ul></li><li><p>kill 可以杀死某</p><ul><li>个正在进行或者已经是dest状态的进程</li><li>eg; ps ax</li></ul></li><li><p>passwd 可以设置口令</p></li><li><p>history 用户用过的命令</p><ul><li>eg: history //可以显示用户过去使用的命令</li></ul></li><li><p>!! 执行最近一次的命令</p><ul><li>mkdir命令</li><li>eg: mkdir netseek //创建netseek这个目录</li></ul></li><li><p>tar 解压命令</p><ul><li>eg: tar -zxvf nmap-3.45.tgz //将这个解压到nmap-3.45这个目录里</li></ul></li><li><p>finger 可以让使用者查询一些其他使用者的资料</p><ul><li>eg: finger //查看所用用户的使用资料</li><li>finger root //查看root的资料</li><li>本文讲解了Linux创建文件命令的方法 ,希望对您的学习有所帮助。</li><li>创建文件夹</li><li>mkdir aaa</li><li>mkdir -p aaa</li><li>创建文件命令</li><li>vi foo.txt</li><li>emacs foo.txt</li><li>echo “aaaa” &gt; foo.txt</li><li>cat &gt; foo.txt</li><li>清除命令</li><li>foo.txt</li><li>mkdir /home/u1 创建文件夹/home/u1</li><li>chown oracle /home/u1 表示改变目录所有者为oracle账户;</li><li>chgrp dba /home/u1 改变/home/u1目录为dba所有;</li><li>chmod 755 /home/u1 表示oracle账户对/home/u1目录有755权限;</li><li>rmdir /home/u1 表示删除/home/u1目录</li><li>hostname可以查看linux的计算机名;</li><li>whoami可以查看当前用户;</li><li>pwd显示当前路径;</li><li>df查看系统的硬件信息</li><li>ls -lrt l表示显示详细列表，-t表示按时间排序,-r反向排序</li><li>cat orcl_ora_3436.trc|grep bucket</li><li>以下查看相关文件内容:</li><li>more /etc/oratab</li><li>cat /etc/passwd</li><li>cat /etc/group</li><li>以上是Linux创建文件命令的方法。</li><li>linux中创建文件用touch 例如：touch 1.txt</li><li>删除文件用rm 例如：rm -f 1.txt</li><li>创建目录用mkdir 例如：mkdir daiyuanqi</li><li>删除空目录用rmdir 例如：rmdir daiyuanqi （有东西的目录不能删）</li><li>删除装有东西的目录就用rm -rf 例如rm -rf XXX</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装过程</title>
      <link href="/2017/08/04/CentOS7%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
      <url>/2017/08/04/CentOS7%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="安装UltraISO"><a href="#安装UltraISO" class="headerlink" title="安装UltraISO"></a>安装UltraISO</h2><p>官网搜索next</p><hr><h2 id="从U盘安装CentOS7-3教程"><a href="#从U盘安装CentOS7-3教程" class="headerlink" title="从U盘安装CentOS7.3教程"></a>从U盘安装CentOS7.3教程</h2><ul><li>准备工作:<ul><li>一台没系统的普通电脑<ul><li>u盘一个（大于1G，最小安装的话不超过1G，根据选择系统大小匹配U盘即可）</li><li>CentOS7.3 iso文件一个</li><li>UltraISO工具</li></ul></li></ul></li></ul><a id="more"></a><ul><li><p>制作U盘</p><ul><li>使用UltraISO工具 文件-》打开 选择你的ISO文件</li><li>先使用UltraISO刻录镜像至U盘内（PS:刻录的时候隐藏启动分区可以选成无，里面的packages文件夹可以删除，这个文件夹是没什么用的，而且大小挺大的，因为安装的时候有镜像在U盘内）</li></ul></li><li><p>开始安装</p><ul><li>把制作好的U盘插入需要安装Linux的电脑，把电脑的第一启动方式设置为U盘启动之后 会进入选择安装界面</li><li>接下来就是最重要的地方，关系着你能不能安装成功 我就是在这里卡了好久</li><li>先移动到第二项test &amp;Install</li><li>然后按e键编辑路径</li><li>将vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 quiet改成vmlinuz initrd=initrd.img linux dd quiet</li><li>ctrl+x</li><li>然后就能在显示出的列表中 查看你的硬盘信息，很清晰就能知道哪一个是你的U盘（一般显示的几个 格式为NTFS的都是你电脑自身的盘符，另外的一个就是你的U盘，记下你的U盘的盘符名字 我的就是sda4）使用ctrl+alt+del 重新启动电脑，重复上面的步骤 这一次 将vmlinuz initrd=initrd.img inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 quiet改成vmlinuz initrd=initrd.img inst.stage2=hd:/dev/sda4（你自己的U盘盘符） quiet ctrl+x 等待安装程序启动，进行CentOS的安装</li></ul></li><li><p>Linux引导安装</p><ul><li>选择中文安装</li><li>选择时区，设置时间，能够在网络与主机里面连接wifi之后 在时间设置里面使用网络时间</li><li>选择软件的安装源 U盘安装一般是默认选择 一般是Packages文件夹，不用管</li><li>比较常用的是最小化安装（安装快，只有命令行操作）</li><li>带有桌面的安装（一些配置和使用都可以图形化操作，较好用）</li><li>服务器版安装（特定组件可以省掉自己安装的很多问题），这里选择最小化安装，另外可以根据自己的需要从右面选择部分组件安装</li><li>刚开始接触Linux的朋友建议使用GHOME图形操作界面，好上手</li><li>网络和主机名里面配置网络信息</li><li>我这里是用的虚拟机安装 所以安装位置只能选择虚拟机，但是在真机安装的时候 需要选择具体的安装位置，如果之前电脑用过WIndows 硬盘已经分区了 需要进行磁盘释放，之后选择安装位置</li><li>全部信息确认完毕之后 就可以开始安装了</li><li>在这里可以新建用户 设置root操作 等待下方安装进度完成 之后就能进入Linux系统了</li></ul></li></ul><hr><h2 id="解决CentOS7-用U盘-无法进入安装界面"><a href="#解决CentOS7-用U盘-无法进入安装界面" class="headerlink" title="解决CentOS7 用U盘 无法进入安装界面"></a>解决CentOS7 用U盘 无法进入安装界面</h2><ul><li>这是用uefi方式启动的CentOS的版本是1708</li><li>首先按”e”键进入编辑界面将inst.stage2=hd:LABEL=CentOS\x207\x20x86_64  改为linux dd</li><li>按”ctrl + x”执行</li><li>然后找到那个驱动器</li><li>这里是sdd4</li><li>重新进入引导界面，修改以下信息</li><li>从inst.stage2=hd:开始，修改为/dev/sdd4 (这是自己的U盘位置)</li><li>按”ctrl + x”</li><li>稍等片刻，就可以安装CentOS7了</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程的描述与控制</title>
      <link href="/2017/07/06/%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/"/>
      <url>/2017/07/06/%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8F%8F%E8%BF%B0%E4%B8%8E%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前趋图和程序执行"><a href="#前趋图和程序执行" class="headerlink" title="前趋图和程序执行"></a>前趋图和程序执行</h2><h3 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h3><p>指一个有向无循环图，用于描述进程之间执行的先后顺序</p><a id="more"></a><p><img src="/2017/07/06/进程的描述与控制/%E5%89%8D%E8%B6%8B%E5%9B%BE.png" alt="RUNOOB 图标"></p><h3 id="程序顺序执行"><a href="#程序顺序执行" class="headerlink" title="程序顺序执行"></a>程序顺序执行</h3><h4 id="程序的顺序执行"><a href="#程序的顺序执行" class="headerlink" title="程序的顺序执行"></a>程序的顺序执行</h4><p>一个程序由若干程序组组成，每一个程序段完成特定的功能，在执行时按照先后顺序依次执行，仅前一段程序执行后，才会执行下一段程序</p><h4 id="程序执行的特征"><a href="#程序执行的特征" class="headerlink" title="程序执行的特征"></a>程序执行的特征</h4><ul><li>顺序性<ul><li>严格按照规定顺序执行</li></ul></li><li>封闭性<ul><li>独占全集资源，只有程序本身可以改变资源状态，不受未接影响</li></ul></li><li>可再现性<ul><li>程序初始环境和执行环境相同，不论怎么执行都可获得相同结果</li></ul></li></ul><h3 id="程序并发执行"><a href="#程序并发执行" class="headerlink" title="程序并发执行"></a>程序并发执行</h3><h4 id="程序并发执行-1"><a href="#程序并发执行-1" class="headerlink" title="程序并发执行"></a>程序并发执行</h4><p>不存在前趋关系，可以并发执行</p><h4 id="程序并发执行时的特征"><a href="#程序并发执行时的特征" class="headerlink" title="程序并发执行时的特征"></a>程序并发执行时的特征</h4><p>并发执行时，提高了系统的吞吐量、资源利用率，由于他们共享系统资源，是他们在执行程序时必形成相互制约关系</p><ul><li>间断性<ul><li>共享系统资源，完成统一任务相互合作，使得这些程序之间形成制约关系，导致程序“执行————暂停————执行”间断性活动规律</li></ul></li><li>失去封闭性<ul><li>资源共享，其中任一程序改变都会受到其他程序影响</li></ul></li><li>不可再现性<ul><li>失去封闭性，导致不可再现性</li></ul></li></ul><hr><h2 id="进程的描述"><a href="#进程的描述" class="headerlink" title="进程的描述"></a>进程的描述</h2><h3 id="进程的定义和特征"><a href="#进程的定义和特征" class="headerlink" title="进程的定义和特征"></a>进程的定义和特征</h3><h4 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h4><p>为了使并发执行的程序（含数据）都能独立运行，在操作系统中必须为配置一个专门的数据结构称之为进程控制块，一般情况下我们把进程实体就简称为进程，创建进程实质是创建进程实体中的PCB；撤销进程实质是撤销进程的PCB</p><ul><li>进程是程序的一次执行</li><li>进程是一个程序及其数据在处理机上顺序执行时所发生的活动</li><li>进程是具有独立功能的程序在一个数据集合上运行的过程，他是系统进行资源分配和调度的一个独立单位</li></ul><p><strong>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位</strong></p><h4 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h4><ul><li>动态性：进程的实质是进程实体的执行过程，“他由创建而产生，有调度而执行，有撤销而消亡”，可见进程有一定的生命周期。而程序只是一组有序指令集合，是静态的。</li><li>并发性：进程实体同存于内存中，且能在一段时间内运行。程序（没有建立PCB）是不能参与并发执行的</li><li>独立性：进程实体是一个能独立运行、独立获得资源和独立接收调度的基本单位</li><li>异步性：进程是按异步方式运行的，即按各自独立的、不可预知的速度向前推进</li></ul><h3 id="进程的基本状态及转换"><a href="#进程的基本状态及转换" class="headerlink" title="进程的基本状态及转换"></a>进程的基本状态及转换</h3><h4 id="进程的三种基本状态"><a href="#进程的三种基本状态" class="headerlink" title="进程的三种基本状态"></a>进程的三种基本状态</h4><ul><li>就绪状态<ul><li>进程已获取除CUP外所有必要资源，只要获得CPU，便可立即执行</li><li>系统中有许多出于就绪状态的进程，通常将他们按照一定的策略排成一个队列，成就绪队列</li></ul></li><li>执行状态<ul><li>已获得CPU，正在执行的状态</li><li>单机处理系统中，只有一个进程处于执行状态</li><li>多处理机系统中，多个进程处于执行状态</li></ul></li><li>阻塞状态<ul><li>正在执行进程由于发生某些事件暂时无法继续执行的状态</li><li>此时OS把处理机分配给另外一个就绪进程，而让受阻进程处于暂停状态称为苏泽状态</li><li>在较大系统中根据阻塞原因不能，设置多个阻塞队列</li></ul></li></ul><h4 id="三种状态基本转换"><a href="#三种状态基本转换" class="headerlink" title="三种状态基本转换"></a>三种状态基本转换</h4><p><img src="/2017/07/06/进程的描述与控制/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81.png" alt="RUNOOB 图标"></p><h4 id="创建状态和终止状态"><a href="#创建状态和终止状态" class="headerlink" title="创建状态和终止状态"></a>创建状态和终止状态</h4><ul><li>创建状态<ul><li>申请一个空白PCB，向PCB中填写用于管理和控制的进程信息</li><li>为该进程分配运行时所必须的资源</li><li>把该进程转入就绪态并插入就绪队列中</li></ul></li></ul><p><strong>如果进程所需资源商不能满足，进程不能被调度运行，此时进程属于创建状态</strong></p><p><strong>为保证进程调度必须在创建完成后进行，与确保进程控制块的完整性</strong></p><ul><li>终止状态<ul><li>等待操作系统善后处理</li><li>将其PCB清零，将PCB返还系统</li></ul></li></ul><p><img src="/2017/07/06/进程的描述与控制/%E8%BF%9B%E7%A8%8B%E4%BA%94%E7%A7%8D%E7%8A%B6%E6%80%81.png" alt="RUNOOB 图标"></p><h3 id="挂起操作和进程状态的转变"><a href="#挂起操作和进程状态的转变" class="headerlink" title="挂起操作和进程状态的转变"></a>挂起操作和进程状态的转变</h3><p>当挂起操作用于某个进程时，该进程将被挂起，意味着此时该进程处于静止状态。如果进程正在执行，它将暂停执行。若原本处于就绪状态，则该进程此时暂时不接受调度。与挂起操作对于的是激活操作</p><h4 id="挂起操作的引入"><a href="#挂起操作的引入" class="headerlink" title="挂起操作的引入"></a>挂起操作的引入</h4><ul><li>终端用户的需要<ul><li>运行时发现问题，暂停程序运行</li></ul></li><li>父进程请求<ul><li>父进程挂起自己某个进程</li></ul></li><li>负荷调节的需要</li><li>操作系统的需要</li></ul><h4 id="引入挂起原语操作后三个进程状态转换"><a href="#引入挂起原语操作后三个进程状态转换" class="headerlink" title="引入挂起原语操作后三个进程状态转换"></a>引入挂起原语操作后三个进程状态转换</h4><ul><li>活动就绪—&gt;静止就绪</li><li>活动阻塞—&gt;禁止阻塞</li><li>禁止就绪—&gt;活动就绪</li><li>禁止阻塞—&gt;活动阻塞</li></ul><p><img src="/2017/07/06/进程的描述与控制/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="RUNOOB 图标"></p><h4 id="引入挂起操作后五个进程状态的转换"><a href="#引入挂起操作后五个进程状态的转换" class="headerlink" title="引入挂起操作后五个进程状态的转换"></a>引入挂起操作后五个进程状态的转换</h4><ul><li>NULL -&gt; 创建</li><li>创建 -&gt; 活动就绪</li><li>创建 -&gt; 静止就绪</li><li>执行 -&gt; 终止</li></ul><p><img src="/2017/07/06/进程的描述与控制/%E5%88%9B%E5%BB%BA%E7%BB%88%E6%AD%A2%E6%8C%82%E8%B5%B7.png" alt="RUNOOB 图标"></p><h3 id="进程管理中的数据结构"><a href="#进程管理中的数据结构" class="headerlink" title="进程管理中的数据结构"></a>进程管理中的数据结构</h3><h4 id="操作系统中用于管理控制的数据结构"><a href="#操作系统中用于管理控制的数据结构" class="headerlink" title="操作系统中用于管理控制的数据结构"></a>操作系统中用于管理控制的数据结构</h4><p>在计算机系统中，对于每个资源和每个进程都设置了一个数据结构，用于表征其实体，我们称之为资源信息表或进程信息表，其中包含了资源或进程的标识、描述、状态等信息以及一批指针。通过这些指针，可以将同类资源或进程的信息表，或者同一进程所占用的资源信息表分类链接成不同的队列，便于操作系统进行查找。 </p><p>OS管理的这些数据结构一般分为以下四类：内存表、设备表、文件表和用于进程管理的进程表，通常进程表又被称为进程控制块PCB。<br><img src="/2017/07/06/进程的描述与控制/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="RUNOOB 图标"></p><h4 id="进程控制块PCB的作用"><a href="#进程控制块PCB的作用" class="headerlink" title="进程控制块PCB的作用"></a>进程控制块PCB的作用</h4><ul><li>作为独立运行基本单位的标志<ul><li>进程配置PCB后就表示他已是一个能在多道环境下独立运行的合法的基本单位，PCB称为进程存在系统的唯一标识</li></ul></li><li>能实现间断性运行方式<ul><li>采用停停走走的间断性的运行方式运行</li></ul></li><li>提供进程管理所需信息</li><li>提供进程调度所需信息</li><li>实现与其他进程的同步与通信</li></ul><h4 id="进程控制块中的信息"><a href="#进程控制块中的信息" class="headerlink" title="进程控制块中的信息"></a>进程控制块中的信息</h4><ul><li>进程标识符：唯一标识一个进程。一个进程有两个标识符<ul><li>外部标识符<ul><li>方便进程间调用</li></ul></li><li>内部标识符<ul><li>方便系统对进程调用</li></ul></li></ul></li><li>处理机状态<ul><li>通用寄存器</li><li>指令计时器</li><li>程序状态字PSW</li><li>用户占指针</li></ul></li><li>进程调度信息<ul><li>进程状态，指明进程的当前状态，它是作为进程调度和对换时的依据；</li><li>进程优先级，是用于描述进程使用处理机的优先级别的一个整数，优先级高的进程应优先获得处理机；</li><li>进程调度所需的其他信息，它们与所采用的进程调度算法有关，比如，进程已等待CPU的时间总和、进程已执行的时间总和等；</li><li>事件，是指进程由执行状态转变为阻塞状态所等待发生的事件，即阻塞原因。</li></ul></li><li>进程控制信息<ul><li>进程和数据的地址，进程实体中的程序和数据的内存或外存地(首)址，以便再调度到该进程执行时，能从PCB中找到其程序和数据；</li><li>进程同步和通信机制，这是实现进程同步和进程通信时必需的机制，如消息队列指针、信号量等，它们可能全部或部分地放在PCB中；</li><li>资源清单，在该清单中列出了进程在运行期间所需的全部资源(除CPU以外)，另外还有一张已分配到该进程的资源的清单</li><li>连接指针，它给出了本进程(PCB)所在队列中的下一个进程的PCB的首地址。</li></ul></li></ul><h4 id="进程控制块的组织方式"><a href="#进程控制块的组织方式" class="headerlink" title="进程控制块的组织方式"></a>进程控制块的组织方式</h4><ul><li>线性方式<ul><li>放入线性表中，将该表的首址存放在内存的一个专用区域中<br><img src="/2017/07/06/进程的描述与控制/%E7%BA%BF%E6%80%A7%E6%96%B9%E5%BC%8F.png" alt="RUNOOB 图标"></li></ul></li><li>链接方式<ul><li>链接成一个对列<br><img src="/2017/07/06/进程的描述与控制/%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F.png" alt="RUNOOB 图标"></li></ul></li><li>索引方式<ul><li>根据状态不同建立几张索引表<br><img src="/2017/07/06/进程的描述与控制/%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F.png" alt="RUNOOB 图标"></li></ul></li></ul><hr><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>进程控制是进程管理的最基本部分，主要包括创建进程、终止已完成进程、将因发生异常情况而无法继续运行的进程处于阻塞状态、负责进程运行中的状态转换等功能。</p><h3 id="进程系统内核"><a href="#进程系统内核" class="headerlink" title="进程系统内核"></a>进程系统内核</h3><ul><li>系统泰（管态/内核态）<ul><li>有较高特权，能执行一切指令，访问所有寄存器和存储区，传统系统都在系统态中运行</li></ul></li><li>用户态（目态）<ul><li>有较低的特权，仅能执行规定的指令，访问指定的寄存器和存储区</li></ul></li></ul><h4 id="支撑功能"><a href="#支撑功能" class="headerlink" title="支撑功能"></a>支撑功能</h4><ul><li>中断处理<ul><li>内核最基本的功能</li></ul></li><li>始终管理<ul><li>内核一项基本功能</li></ul></li><li>原语操作<ul><li>有若干指令组成的</li></ul></li></ul><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>允许一个进程创建另一个进程，创建进程称为父进程，被创建进程子进程，在UNIX中形成进程家族（组），子进程继承父进程拥有资源</p><ul><li>申请空白PBC，为新进程申请获得唯一的数字标识</li><li>为进程分配所需资源</li><li>初始化进程控制块<ul><li>初始化标识信息，将系统分配的标识符和父进程标识符填入新PCB中</li><li>初始化处理机状态信息，使程序计数器指向程序的入口地址</li><li>初始化处理机控制信息，设置进程状态（就绪、静止状态）</li><li>放入就绪队列（有空间）</li></ul></li></ul><h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><ul><li>引起进程终止事件<ul><li>正常结束<ul><li>进程的任务已经完成，准备退出运行</li></ul></li><li>异常结束<ul><li>越界错<ul><li>程序锁访问的存储区，已越出该进程的区域</li></ul></li><li>保护错<ul><li>访问不允许方的资源或文件</li><li>不适当的方式访问</li><li>例：写一个只读文件</li></ul></li><li>非法指令<ul><li>执行不存在指令</li></ul></li><li>特权指令错<ul><li>用户进程执行OS的指令</li></ul></li><li>运行超时<ul><li>进程执行时间超出指定时间最大值</li></ul></li><li>等待超时<ul><li>进程等待时间超出指定时间的最大值</li></ul></li><li>算数运算错<ul><li>执行一个禁止的运算</li></ul></li><li>I/O 故障<ul><li>在I/O过程中发生了错误</li></ul></li></ul></li><li>外界干预<ul><li>操作员或操作系统干预</li><li>父进程请求</li><li>因父进程终止</li></ul></li></ul></li><li>进程的终止及过程    <ul><li>根据被终止进程标识符，从PCB集合中检索出该进程PCB，从中读取该进程状态</li><li>若被终止进程处于执行状态，应立即终止进程的执行，设置调度标志为真，用于指示该进程被终止后应重新进行调度</li><li>有子孙进程先结，将所有子孙进程终止，防止他们成为不可控进程</li><li>把拥有的全部资源还给父进程，或者归还系统</li><li>被终止进程（PBC）从所在队列（或链表）移出</li></ul></li></ul><h3 id="进程的阻塞和唤醒"><a href="#进程的阻塞和唤醒" class="headerlink" title="进程的阻塞和唤醒"></a>进程的阻塞和唤醒</h3><h4 id="引起进程阻塞和唤醒的事件"><a href="#引起进程阻塞和唤醒的事件" class="headerlink" title="引起进程阻塞和唤醒的事件"></a>引起进程阻塞和唤醒的事件</h4><ul><li>向系统请求共享资源失败<ul><li>进程向系统请求共享资源时，系统无足够资源，此进程不能继续运行</li></ul></li><li>等待某种操作的完成</li><li>新数据尚未到达</li><li>等待新任务的到达</li></ul><h4 id="进程阻塞过程（block）"><a href="#进程阻塞过程（block）" class="headerlink" title="进程阻塞过程（block）"></a>进程阻塞过程（block）</h4><p>阻塞市金城自身得的一种主动行为，执行–&gt;阻塞，将PCB插入阻塞队列</p><h4 id="进程唤醒过程（wakeup）"><a href="#进程唤醒过程（wakeup）" class="headerlink" title="进程唤醒过程（wakeup）"></a>进程唤醒过程（wakeup）</h4><p>被阻塞进程所起的事件发生后，有关进程调用wakeup将改时间的进程唤醒。wakeup执行过程：</p><ul><li>把被阻塞进从等待该事件的阻塞队列中移除</li><li>将其PCB中的现行状态油阻塞改为就绪</li><li>将该PCB插入到就绪队列中</li></ul><h3 id="进程的挂起与激活"><a href="#进程的挂起与激活" class="headerlink" title="进程的挂起与激活"></a>进程的挂起与激活</h3><h4 id="进程的挂起"><a href="#进程的挂起" class="headerlink" title="进程的挂起"></a>进程的挂起</h4><p>发生挂起进程事件后，OS将调用挂起原语suspend将制定进程或处于阻塞状态的进程挂起<br>suspend 执行过程</p><ul><li>检查被挂起进程的状态（处于活动、就绪状态改为禁止就绪状态）</li><li>活动阻塞状态进程，改为禁止阻塞</li><li>把该进程的PCB复制到制定的内存区域</li><li>若被挂起的进程正在运行，则转向调度程序重新调度</li></ul><h4 id="进程的激活过程"><a href="#进程的激活过程" class="headerlink" title="进程的激活过程"></a>进程的激活过程</h4><p>发生激活事件后，OS利用激活active将指定进程激活</p><hr><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><p>硬件同步机制、信号量机制、管程机制</p><h3 id="进程同步的基本概念"><a href="#进程同步的基本概念" class="headerlink" title="进程同步的基本概念"></a>进程同步的基本概念</h3><p>多个相关进程在执行次序上进行协调，使并发执行的诸进程之间按照一定规则共享系统资源</p><h4 id="两种形式制约关系"><a href="#两种形式制约关系" class="headerlink" title="两种形式制约关系"></a>两种形式制约关系</h4><ul><li>间接相互制约关系<ul><li>共享系统资源，使这些并发执行的程序之间形成相互制约的关系</li></ul></li><li>直接相互制约关系<ul><li>完成某项任务建立多个进程。这些进程完成同一项额任务而相互合作</li></ul></li></ul><h4 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h4><ul><li>打印机</li><li>磁带机</li></ul><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><ul><li>每个进程中访问临界资源的代码称之为临界区</li><li>进入临界区之前，先对临界资源进行检查，看他是否正在被访问。若正在被访问，进程便可进入临界区对该资源进行访问，并设置正在访问标识<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">进入区</span><br><span class="line">临界区</span><br><span class="line">退出区</span><br><span class="line">剩余区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="同步机制应遵循的规则"><a href="#同步机制应遵循的规则" class="headerlink" title="同步机制应遵循的规则"></a>同步机制应遵循的规则</h4><ul><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ul><h3 id="硬件同步机制"><a href="#硬件同步机制" class="headerlink" title="硬件同步机制"></a>硬件同步机制</h3><h4 id="关中断"><a href="#关中断" class="headerlink" title="关中断"></a>关中断</h4><p>进入锁测试之前关闭中断，知道完成锁测试并上锁之后才能打开中断</p><h4 id="利用Test-and-Set指令实现互斥"><a href="#利用Test-and-Set指令实现互斥" class="headerlink" title="利用Test-and-Set指令实现互斥"></a>利用Test-and-Set指令实现互斥</h4><h4 id="利用Swap指令实现进程互斥"><a href="#利用Swap指令实现进程互斥" class="headerlink" title="利用Swap指令实现进程互斥"></a>利用Swap指令实现进程互斥</h4><h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><h4 id="整形信号量"><a href="#整形信号量" class="headerlink" title="整形信号量"></a>整形信号量</h4><p>整型信号量定义为一个用于表示资源数目的整形量S，他与一般整型量不同，除初始化仅能通过两个标准的原子操作wait(S)和signal(S)来访问，被称为P、操作。原子操作不可中断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wait(S)&#123;</span><br><span class="line">while(S&lt;=0);</span><br><span class="line">S--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(S)&#123;</span><br><span class="line">S++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="记录信号量"><a href="#记录信号量" class="headerlink" title="记录信号量"></a>记录信号量</h4><p>一、整形信号量wait操作，只要S&lt;= 就会不断地测试（未遵循“让权等待”的准则）而是进程处于忙等状态<br>二、记录型信号量机制不存在“忙等”现象的进程机制。但采取了“让权等待”后，会出现多个进程同时访问同一临界区资源，需要一个用于代表资源数目的变量value外还需要一个进程链表指针list，用于连接所有上述等待进程</p><h4 id="AND型信号量"><a href="#AND型信号量" class="headerlink" title="AND型信号量"></a>AND型信号量</h4><p>基本思想：进程在整个运行过程中需要的所有资源，一次性全部地分配给进程，待进程使用完后再一起释放。</p><h3 id="信号量的应用"><a href="#信号量的应用" class="headerlink" title="信号量的应用"></a>信号量的应用</h3><h4 id="利用信号量实现进程互斥"><a href="#利用信号量实现进程互斥" class="headerlink" title="利用信号量实现进程互斥"></a>利用信号量实现进程互斥</h4><p>为使多个进程能互斥的访问某临界资源，只需为该资源设置一互斥信号量mutex，并设其初始值为1</p><ul><li>当mutex=0时，表示有一个进程进入临界区运行，另外一个必须等待，挂入阻塞队列；</li><li>当mutex=-1时，表示有一个进程正在临界区运行，另外一个进程因等待二阻塞在信号量队列中，需要被当前已在临界区运行的进程退出时唤醒</li></ul><h4 id="利用信号量实现前去关系"><a href="#利用信号量实现前去关系" class="headerlink" title="利用信号量实现前去关系"></a>利用信号量实现前去关系</h4><h3 id="管程机制"><a href="#管程机制" class="headerlink" title="管程机制"></a>管程机制</h3><h4 id="管程定义"><a href="#管程定义" class="headerlink" title="管程定义"></a>管程定义</h4><p>系统中各种硬件资源和软件资源均可用数据结构抽象的描述其资源特性，即少量信息和对该资源锁执行的操作来表示资源，而忽略他们的内部结构和实现细节。</p><ul><li>管程的名称</li><li>局部于管程的共享数据结构说明</li><li>对该数据结构进行操作的一组过程</li><li>对局部于管程的共享数据设置初始值得语句</li></ul><h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><h3 id="线程的引入"><a href="#线程的引入" class="headerlink" title="线程的引入"></a>线程的引入</h3><p>OS中引入进程目的为了使程序并发执行，提高资源利用率和系统吞吐量<br>OS中一如线程则是为了减少程序在并发执行时所付出的时空开销，使OS有更好的并发性</p><h4 id="进程的两个基本属性"><a href="#进程的两个基本属性" class="headerlink" title="进程的两个基本属性"></a>进程的两个基本属性</h4><ol><li>进程是一个可拥有独立资源的独立单位，一个进程要独立运行，必须拥有一定资源（存放程序正文、数据的磁盘和内存地址空间以及I/O设备打开的文件、信号量等）</li><li>进程同时又可是一个可独立运行调度和分配的基本单位，一个进程要独立运行，必须是一个可独立调度和分配的基本单位。每个进程在系统中有唯一的PCB，系统可根据其PCB感知进程的存在，也可以根据PCB中的信息对进程进行调度，还可以将端点信息保存在PCB中，利用进程PCB回复运行现场，程序独立运行的基本单位正是有这两个基本属性构成的</li></ol><h4 id="进程并发执行所需付出的时空开销"><a href="#进程并发执行所需付出的时空开销" class="headerlink" title="进程并发执行所需付出的时空开销"></a>进程并发执行所需付出的时空开销</h4><ul><li>创建进程</li><li>撤销经常</li><li>进程切换  </li></ul><h4 id="进程——作为资源调度分配的基本单位"><a href="#进程——作为资源调度分配的基本单位" class="headerlink" title="进程——作为资源调度分配的基本单位"></a>进程——作为资源调度分配的基本单位</h4><h4 id="线程与进程的比较"><a href="#线程与进程的比较" class="headerlink" title="线程与进程的比较"></a>线程与进程的比较</h4><p>线程具有许多传统进程锁具有的特征</p><ol><li>调度的基本单位</li></ol><ul><li>进程<ul><li>进程是作为独立调度和分配的基本单位，因此进程是指能独立运行的基本单位。</li><li>每次调度都时都需要进行上下文切换，开销较大</li></ul></li><li>线程<ul><li>引入线程把线程作为调度和分配的基本单位，因而线程是能够独立运行的基本单位</li><li>在线程切换时仅需保存和设置少量寄存器内容，切换代价远低于进程</li><li>同一进程中，线程切换不会引起进程切换</li><li>从一个进程中的线程切换到另一个进程中的线程时，必然会引起进程切换</li></ul></li></ul><ol start="2"><li>并发性</li></ol><p>不仅进程之间可以并发执行，而在一个进程中的所有线程也可以并发执行，不同进程中的线程也可以并发执行</p><ol start="3"><li>拥有资源</li></ol><ul><li>进程可以拥有资源，并作为系统中拥有资源的一个基本单位</li><li>线程本身并不拥有系统资源，而且仅有一点必不可少的、能保证独立运行的资源</li><li>线程除了拥有自己的少量资源外，还允许多个进程共享该进程所拥有的资源<ul><li>属于同一进程的所有线程都具有相同的地址空间</li><li>线程可以访问改地址空间中的每一个虚地址</li><li>还可以访问进程所拥有的资源</li></ul></li></ul><ol start="4"><li>独立性</li></ol><p>同一进程中的不同线程之间的独立性要比不能进程之间的独立性低得多</p><ol start="5"><li>系统开销</li></ol><p>在创建或撤销进程时，系统都要为之分配和回收进程控制块、分配或回收其他资源</p><ol start="6"><li>支持多处理系统</li></ol><p>多处理机系统中，对于传统的进程，单线程进程，不管有多少处理机该进程只能运行在一个处理机上。<br>多线程进程就可以将一个进程中的多个线程分配到多个处理机上</p><h3 id="线程状态和线程控制块"><a href="#线程状态和线程控制块" class="headerlink" title="线程状态和线程控制块"></a>线程状态和线程控制块</h3><ol><li>线程运行三个状态</li></ol><ul><li>执行状态<ul><li>已获得处理机正在运行</li></ul></li><li>就绪状态<ul><li>以具备各种执行条件，只需获得CPU便可立即执行</li></ul></li><li>阻塞状态 <ul><li>因某事件受阻而处于暂停状态</li></ul></li></ul><ol start="2"><li>线程控制块TCB</li></ol><p>每个线程配置一个线程控制块TCB，将所有用于控制和管理线程的信息记录在线程控制块中</p><ul><li>线程标识符</li><li>一组寄存器</li><li>线程运行状态</li><li>优先级</li><li>线程专有存储区</li><li>信号品屏蔽</li><li>堆栈指针</li></ul><ol start="3"><li>多线程操作系统属性</li></ol><ul><li>进程是一个可拥有资源的基本单位</li><li>多个线程可以并发执行</li><li>进程已不是可执行实体</li></ul><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h3 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h3><p>线程已在许多系统中实现，但各系统的实现方式并不完全相同。在有的系统中，特别是一些数据库管理系统，如infomix所实现的是用户级线程； 而另一些系统(如Macintosh和OS/2操作系统)所实现的是内核支持线程；还有一些系统如Solaris操作系统，则同时实现了这两种类型的线程。</p><ol><li>内核支持线程KST(Kernel Supported Threads)</li></ol><ul><li><p>在OS中的所有进程，无论是系统进程还是用户进程，都是在操作系统内核的支持下运行的，是与内核紧密相关的。而内核支持线程KST同样也是在内核的支持下运行的，它们的创建、阻塞、撤消和切换等，也都是在内核空间实现的。为了对内核线程进行控制和管理，在内核空间也为每一个内核线程设置了一个线程控制块，内核根据该控制块而感知某线程的存在，并对其加以控制。当前大多数OS都支持内核支持线程。</p></li><li><p>这种线程实现方式主要有四个主要优点：</p><ul><li>在多处理器系统中，内核能够同时调度同一进程中的多个线程并行执行；</li><li>如果进程中的一个线程被阻塞了，内核可以调度该进程中的其它线程占有处理器运行，也可以运行其它进程中的线程；</li><li>内核支持线程具有很小的数据结构和堆栈，线程的切换比较快，切换开销小；</li><li>内核本身也可以采用多线程技术，可以提高系统的执行速度和效率。</li></ul><ol start="2"><li>用户级线程ULT(User Level Threads)</li></ol></li><li><p>用户级线程是在用户空间中实现的。对线程的创建、 撤消、同步与通信等功能，都无需内核的支持，即用户级线程是与内核无关的。在一个系统中的用户级线程的数目可以达到数百个至数千个。由于这些线程的任务控制块都是设置在用户空间，而线程所执行的操作也无需内核的帮助，因而内核完全不知道用户级线程的存在。</p></li><li><p>使用用户级线程方式有许多优点：</p><ul><li>线程切换不需要转换到内核空间。</li><li>调度算法可以是进程专用的。</li><li>用户级线程的实现与OS平台无关，因为对于线程管理的代码是属于用户程序的一部分，所有的应用程序都可以对之进行共享。 </li></ul></li><li><p>而用户级线程方式的主要缺点则在于：</p><ul><li>系统调用的阻塞问题。在基于进程机制的OS中，大多数系统调用将使进程阻塞，因此，当线程执行一个系统调用时，不仅该线程被阻塞，而且，进程内的所有线程会被阻塞。而在内核支持线程方式中，则进程中的其它线程仍然可以运行。</li><li>在单纯的用户级线程实现方式中，多线程应用不能利用多处理机进行多重处理的优点，内核每次分配给一个进程的仅有一个CPU，因此，进程中仅有一个线程能执行，在该线程放弃CPU之前，其它线程只能等待。</li></ul></li></ul><ol start="3"><li>组合方式</li></ol><ul><li>有些OS把用户级线程和内核支持线程两种方式进行组合，提供了组合方式ULT/KST 线程。在组合方式线程系统中，内核支持多个内核支持线程的建立、调度和管理，同时，也允许用户应用程序建立、调度和管理用户级线程。<br><img src="/2017/07/06/进程的描述与控制/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.png" alt="RUNOOB 图标"></li></ul><h3 id="线程的实现-1"><a href="#线程的实现-1" class="headerlink" title="线程的实现"></a>线程的实现</h3><ol><li><p>内核支持线程的实现<br>在仅设置了内核支持线程的OS中，一种可能的线程控制方法是，系统在创建一个新进程时，便为它分配一个任务数据区PTDA(Per Task Data Area)，其中包括若干个线程控制块TCB空间，<br><img src="/2017/07/06/进程的描述与控制/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.png" alt="RUNOOB 图标"></p></li><li><p>用户级线程的实现</p></li></ol><ul><li><p>运行时系统(Runtime System)</p><ul><li>所谓“运行时系统”，实质上是用于管理和控制线程的函数(过程)的集合，其中包括用于创建和撤消线程的函数、线程同步和通信的函数，以及实现线程调度的函数等。正因为有这些函数，才能使用户级线程与内核无关。运行时系统中的所有函数都驻留在用户空间，并作为用户级线程与内核之间的接口。</li></ul></li><li><p>内核控制线程</p><ul><li>这种线程又称为轻型进程LWP(Light Weight Process)。每一个进程都可拥有多个LWP，同用户级线程一样，每个LWP都有自己的数据结构(如TCB)，其中包括线程标识符、优先级、状态，另外还有栈和局部存储区等。LWP也可以共享进程所拥有的资源。LWP可通过系统调用来获得内核提供的服务，这样，当一个用户级线程运行时，只须将它连接到一个LWP上，此时它便具有了内核支持线程的所有属性。这种线程实现方式就是组合方式。<br><img src="/2017/07/06/进程的描述与控制/%E7%94%A8%E6%88%B7%E7%BA%A7%E7%BA%BF%E7%A8%8B.png" alt="RUNOOB 图标"></li></ul></li></ul><h3 id="线程的创建和终止"><a href="#线程的创建和终止" class="headerlink" title="线程的创建和终止"></a>线程的创建和终止</h3><ol><li>线程的创建</li></ol><ul><li>应用程序在启动时，通常仅有一个线程在执行，人们把线程称为“初始化线程”，它的主要功能是用于创建新线程。在创建新线程时，需要利用一个线程创建函数(或系统调用)，并提供相应的参数，如指向线程主程序的入口指针、堆栈的大小，以及用于调度的优先级等。在线程的创建函数执行完后，将返回一个线程标识符供以后使用。</li></ul><ol start="2"><li>线程的终止</li></ol><ul><li>当一个线程完成了自己的任务(工作)后，或是线程在运行中出现异常情况而须被强行终止时，由终止线程通过调用相应的函数(或系统调用)对它执行终止操作。但有些线程(主要是系统线程)，它们一旦被建立起来之后，便一直运行下去而不被终止。在大多数的OS中，线程被中止后并不立即释放它所占有的资源，只有当进程中的其它线程执行了分离函数后，被终止的线程才与资源分离，此时的资源才能被其它线程利用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运输层</title>
      <link href="/2017/06/03/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2017/06/03/%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>运输层为相互通信的应用进程提供逻辑通信</li><li>端口和套接字的意义</li><li>无连接的UDP的特点</li><li>面向连接的TCP的特点</li><li>在不可靠的网络上实现可靠网络的传输原理，停止等待协议和ARQ协议</li><li>TCP的滑动窗口、流量控制、拥塞控制和连接管理<a id="more"></a></li></ul><h2 id="运输层协议概述"><a href="#运输层协议概述" class="headerlink" title="运输层协议概述"></a>运输层协议概述</h2><hr><h3 id="进程之间的通信"><a href="#进程之间的通信" class="headerlink" title="进程之间的通信"></a>进程之间的通信</h3><hr><p>从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。<br>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，只有位于网络边缘部分的主机的协议栈才有运输层，而网络核心部分中的路由器在转发分组时都只用到下三层的功能。</p><p><strong>网络层是为主机之间提供逻辑通信；运输层为应用进程之间提供端到端的逻辑通信。</strong></p><p>真正进行通信的实体是主机中的进程，两天机器进程在做数据交换，两台主机进行通信就是两天主机中的<strong>应用进程互相通信</strong></p><h4 id="复用和分用"><a href="#复用和分用" class="headerlink" title="复用和分用"></a>复用和分用</h4><ul><li>复用：在发送方不同的应用进程都可以使用同一个运输层协议传输数据</li><li>分用：接收方的运输层再剥去报文的首尾部之后把这些数据交付给目的应用进程</li><li>UDP：无连接</li><li>TCP：面向连接<ul><li>运输层主要的两个协议<ul><li>用户数据报协议UDP</li><li>在传输数据之前不需要先建立连接，接收方收到UDP报文后不需要给出任何确认</li><li>传输控制协议TCP</li><li>提供面向连接服务<br><img src="/2017/06/03/运输层/clipboard.png" alt="RUNOOB 图标"></li></ul></li></ul></li><li>服务器端使用的端口号<ul><li>熟知端口号或系统端口号（0~1023）<br><img src="/2017/06/03/运输层/%E7%86%9F%E7%9F%A5%E7%AB%AF%E5%8F%A3.png" alt="RUNOOB 图标"></li></ul></li><li>客户端使用的端口号或短暂端口号（49152~65535）<ul><li>客户端收到确认之后端口自动释放</li></ul></li></ul><hr><h2 id="用户数据报协议-UDP"><a href="#用户数据报协议-UDP" class="headerlink" title="用户数据报协议 UDP"></a>用户数据报协议 UDP</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li>无连接，发送不需要建立，结束不需要释放</li><li>UDP使用尽最大女里交付：不保证可靠交付，   因此主机不需要维持复杂的连接状态</li><li>UDP是面向报文的：发送方的UDP对应用程序叫下来的报文，添加首部后乡下交付IP层，UDP对应用层交下来的报文既不合并也不拆分，只是保留这些报文的边界</li><li>无拥塞控制：可以丢数据，但不会慢</li><li>支持一对一、一对多、多对一、多对多</li><li>首部开销小，只有8个自己（TCP20个字节）</li></ul><h4 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a>UDP首部格式</h4><ul><li>用户数据包UDP有两个字段：<ul><li>数据字段</li><li>首部字段<ul><li>只有8个字节</li></ul></li></ul></li><li>源端口：源端口。在需要对方回信时使用，不需要全为0</li><li>目的端口：必须</li><li>长度：UDP用户数据报长度，最小值8（仅有首部）</li><li>检验和：检测UDP用户数据包在传输中是否有错，有错就丢弃<br>&nbsp;<br><img src="/2017/06/03/运输层/udp.png" alt="RUNOOB 图标"></li></ul><hr><h2 id="传输控制协议-TCP-概述"><a href="#传输控制协议-TCP-概述" class="headerlink" title="传输控制协议 TCP 概述"></a>传输控制协议 TCP 概述</h2><ul><li>端口号拼接到IP地址构成套接字或插口<ul><li>套接字socket=(IP地址：端口号)</li></ul></li><li>每一条TCP连接唯一的被通信两个端点（即两个套接字）所确定<ul><li>TCP连接：=(socket1,socket2) = (IP1:port1),(IP2:poer2)</li></ul></li></ul><hr><h2 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h2><h2 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h2><p>TCP面向字节流，但传输的数据单元式报文段。报文段分为首部和数据两部分，而TCP的全部功能都体现在他首部中各个字段的作用<br>TCP报文首部的前20个字节是固定的，后面有4n个字节是根据需要而增加的选项（n是整数）。因此TCP首部的最小长度时20字节<br>   <img src="/2017/06/03/运输层/tcp%E6%8A%A5%E6%96%87%E6%AE%B5.png" alt="RUNOOB 图标"></p><ul><li>源端口和目的端口 <ul><li>各占2个字节</li><li>分别写入源端口号和目的端口号</li></ul></li><li>序号（报文段序号）<ul><li>占4个字节</li><li>范围[0,2的32次方 - 1]，共2的32次方个序列号（4 294 967 296）。</li><li>增加到2的32次方-1后，下一个序号就又回到0</li><li>序号使用的是mod 2的32次方运算</li><li>TCP是面向字节流的。在一个TCP连接中传送的字节流的每一个字节都按序号排序</li><li>整个要传送的字节流的起始序号必须在连接建立时设置。</li><li>首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号</li></ul></li><li>确认号<ul><li>占四个字节</li><li>期望收到对方下一个报文段的第一个数据字节的序号</li><li>若确认号 = N， 则表明:到序列号N-1位置的所有数据都已经确认收到</li><li>由于序号字段有32位长，可对4GB的数据进行编号。在一般情况下可保证当序号重复使用时，旧序号的数据早已通过网络早已通过网络到达终点</li></ul></li><li>数据偏移<ul><li>占4位</li><li>指出TCP报文段的数据起始处距离TCP报文段的起始处有多远</li><li>指出TCP报文段长度（实际意思）</li><li>由于首部中还有长度不确定的选项字段，因此数据偏移字段是必要的</li></ul></li><li>保留<ul><li>占6位</li><li>保留为后使用，但目前应置为0</li></ul></li><li>紧急URG<ul><li>当URG=1时，表明紧急指针字段有效，他告诉系统此报文段中有紧急数据，应该尽快处理（优先级高的数据），而不是按原来的排队顺序来传输</li></ul></li><li>确认ACK<ul><li>仅当ACK=1时确认好字段才有效</li><li>当ACK=0时确认好无效</li><li>TCP规定在连接建立后所有传送的报文段都必须把ACK设置为1</li></ul></li><li>推送PSH（PuSH）<ul><li>当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能够收到对方的响应。</li><li>PSH = 1</li><li>几首方收到PSH的报文段，就立即交付给应用进程而不等到整个缓存都填满了之后再交付</li><li>很少使用</li></ul></li><li>复位RST<ul><li>RST = 1 而 ACK = 0时，表明是一个连接请求报文段。</li><li>若对方同意，则响应报文段中使用SYN=1 和 ACk = 1</li></ul></li><li>终止（FIN）<ul><li>释放一个连接</li><li>FIN = 1时，表明此报文段发送方的数据已发送完毕，并要求释放运输连接</li></ul></li><li>窗口  <ul><li>占2个字节</li><li>值[0, 2的16次方 - 1]之间的整数。</li><li>窗口指的是发送报文段的一方接收窗口</li><li>窗口值：从本报文段首部中的确认好算起，接收方目前允许对方发送的数据量（字节）</li><li>窗口值作为接收方让发送方设置其发送窗口的依据</li><li>窗口字段明确指出了现在允许对方返送的数据量。窗口值经常在动态变化</li></ul></li><li>检验和<ul><li>占2字节</li><li>检验和检验的范围包括首部和数据两部分</li><li>和UDP用户数据报一样，在计算检验和时，要在TCP报文钱加上12字节的伪首部。</li></ul></li><li>紧急指针<ul><li>占2字节</li><li>紧急指针仅在URG = 1 时才有意义</li><li>指出本报文段中的紧急数据的字节数</li><li>紧急指针指出了紧急数据的末尾数据的字节数</li><li>当窗口为零时也可以发送紧急指针</li></ul></li><li>选项<ul><li>长度可变</li><li>最长可达40字节</li><li>当没有使用“选项”时，TCP的首部长度时20个字节</li></ul></li></ul><hr><h2 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h2><h2 id="TCP-的流量控制"><a href="#TCP-的流量控制" class="headerlink" title="TCP 的流量控制"></a>TCP 的流量控制</h2><h3 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h3><h4 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h4><p>概念：发送方发送速率不要太快，让接收方来的及接收利用滑动窗口机制可以很方便的在TCP连接上实现对流量的控制</p><p><img src="/2017/06/03/运输层/%E6%B5%81%E6%8E%A7.png" alt="RUNOOB 图标"></p><p>发送方的发送窗口数值不能大于接收方接收窗口给出的数值<br>窗口单位是字节，而不是报文段<br>死锁：A在等待B，B在等待A</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><p>TCP为每个连接设有一个持续计时器，只要TCP连接的一方收到对方的窗口通知，就启动持续计时器。若持续计时器时间到期，就发送一个零窗口探测报文段（包含一个字节），而对方再确认这个探测报文段时，给出了现在的窗口值。如果任然是0，那么收到这个报文段的一方就重新设置持续计时器，如果不是零，那么死锁就可以打破</p><h4 id="TCP的传输效率"><a href="#TCP的传输效率" class="headerlink" title="TCP的传输效率"></a>TCP的传输效率</h4><p>应用进程把数据传输到发送方缓存后剩下的就是TCP来处理了可以用不同处理机制TCP报文段的发送时机</p><ul><li>TCP维持一个变量，等于最大报文段长度MSS，只有缓存中的数据达到MSS字节时就组成一个TCP报文段发送出去</li><li>发送发进程来指明要求发送报文段，即TCP支持的推送操作（push）</li><li>发送方的一个计时器过期了，这时就把已有缓存数据装入报文段（不能超过最大报文段MSS）发送出去</li></ul><h5 id="Nagle算法："><a href="#Nagle算法：" class="headerlink" title="Nagle算法："></a>Nagle算法：</h5><p>发送方把缓存中第一个字节先发出去，其余的缓存起来，当接收到对方第一个字符确认后将缓存中的所有数据组装成一个报文段发送过去，同时随后到达的数据进行缓存，只有得到前一个报文段确认后才会继续发送下一个报文段</p><p>规定:当到达的数据已达到发送窗口大小的一半或已达到报文段最大长度时，立即发送下一报文段。这样做就可以提高网络吞吐量</p><p><strong>糊涂窗口综合征</strong><br><strong>接收方缓存数据空间较小</strong></p><p>让接受方等一段时间，当达到接收方已有充足空间、缓存有一半的空闲空间接收方发出确认报文，并向发送方通知当前窗口大小，发送方也不要发送较小的报文段，把数据积累成足够大的报文段或达到接收方缓存空间一半大小</p><p>综上所述：发送方不要发送较小报文段接收方缓存有一小点空间之后就急忙把窗口大小信息通知给发送发</p><hr><h2 id="TCP-的拥塞控制"><a href="#TCP-的拥塞控制" class="headerlink" title="TCP 的拥塞控制"></a>TCP 的拥塞控制</h2><h2 id="TCP-的运输连接管理"><a href="#TCP-的运输连接管理" class="headerlink" title="TCP 的运输连接管理"></a>TCP 的运输连接管理</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新</title>
      <link href="/2017/03/03/%E6%9B%B4%E6%96%B0blog/"/>
      <url>/2017/03/03/%E6%9B%B4%E6%96%B0blog/</url>
      
        <content type="html"><![CDATA[<hr><p>博客内容更新</p><a id="more"></a><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server 或 <span class="variable">$hexo</span> s</span><br></pre></td></tr></table></figure><h3 id="清空资源文件"><a href="#清空资源文件" class="headerlink" title="清空资源文件"></a>清空资源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="重新生成资源文件"><a href="#重新生成资源文件" class="headerlink" title="重新生成资源文件"></a>重新生成资源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate 或 $ hexo g</span><br></pre></td></tr></table></figure><h3 id="发布文章到github-io"><a href="#发布文章到github-io" class="headerlink" title="发布文章到github.io"></a>发布文章到github.io</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy 或 hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
