<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>选择排序</title>
      <link href="/2019/08/02/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/08/02/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>思路分析：在要排序的切片中，选出最小的一个元素与第一个位置的元素交换。然后在剩下的元素当中再找最小的与第二个位置的元素交换，如此循环到倒数第二个元素和最后一个元素比较为止。</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var sli = []int&#123;1, 43, 54, 62, 21, 66, 32, 78, 36, 76, 39&#125;</span><br><span class="line"></span><br><span class="line">func selectSort(sli []int) []int &#123;</span><br><span class="line">//双重循环完成，外层控制轮数，内层控制比较次数</span><br><span class="line">len := len(sli)</span><br><span class="line">for i := 0; i &lt; len-1; i++ &#123;</span><br><span class="line">//先假设最小的值的位置</span><br><span class="line">k := i</span><br><span class="line">for j := i + 1; j &lt; len; j++ &#123;</span><br><span class="line">//sli[k] 是当前已知的最小值</span><br><span class="line">if sli[k] &gt; sli[j] &#123;</span><br><span class="line">//比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。</span><br><span class="line">k = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//已经确定了当前的最小值的位置，保存到 k 中。如果发现最小值的位置与当前假设的位置 i 不同，则位置互换即可。</span><br><span class="line">if k != i &#123;</span><br><span class="line">sli[k], sli[i] = sli[i], sli[k]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sli</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">res := selectSort(sli)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2019/08/02/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/08/02/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>思路分析：选择一个基准元素，通常选择第一个元素或者最后一个元素。通过一趟扫描，将待排序列分成两部分，一部分比基准元素小，一部分大于等于基准元素。此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var sli = []int&#123;1, 43, 54, 62, 21, 66, 32, 78, 36, 76, 39&#125;</span><br><span class="line"></span><br><span class="line">func quickSort(sli []int) []int &#123;</span><br><span class="line">//先判断是否需要继续进行</span><br><span class="line">len := len(sli)</span><br><span class="line">if len &lt;= 1 &#123;</span><br><span class="line">return sli</span><br><span class="line">&#125;</span><br><span class="line">//选择第一个元素作为基准</span><br><span class="line">base_num := sli[0]</span><br><span class="line">//遍历除了标尺外的所有元素，按照大小关系放入左右两个切片内</span><br><span class="line">//初始化左右两个切片</span><br><span class="line">left_sli := []int&#123;&#125;  //小于基准的</span><br><span class="line">right_sli := []int&#123;&#125; //小于基准的</span><br><span class="line">for i := 1; i &lt; len; i++ &#123;</span><br><span class="line">if base_num &gt; sli[i] &#123;</span><br><span class="line">//放入左边切片</span><br><span class="line">left_sli = append(left_sli, sli[i])</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//放入右边切片</span><br><span class="line">right_sli = append(right_sli, sli[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//再分别对左边和右边的切片进行相同的排序处理方式递归调用这个函数</span><br><span class="line">left_sli = quickSort(left_sli)</span><br><span class="line">right_sli = quickSort(right_sli)</span><br><span class="line"></span><br><span class="line">//合并</span><br><span class="line">left_sli = append(left_sli, base_num)</span><br><span class="line">return append(left_sli, right_sli...)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">res := quickSort(sli)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新</title>
      <link href="/2019/08/02/%E6%9B%B4%E6%96%B0blog/"/>
      <url>/2019/08/02/%E6%9B%B4%E6%96%B0blog/</url>
      
        <content type="html"><![CDATA[<p>博客内容更新</p><a id="more"></a><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server 或 <span class="variable">$hexo</span> s</span><br></pre></td></tr></table></figure><h3 id="清空资源文件"><a href="#清空资源文件" class="headerlink" title="清空资源文件"></a>清空资源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="重新生成资源文件"><a href="#重新生成资源文件" class="headerlink" title="重新生成资源文件"></a>重新生成资源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate 或 $ hexo g</span><br></pre></td></tr></table></figure><h3 id="发布文章到github-io"><a href="#发布文章到github-io" class="headerlink" title="发布文章到github.io"></a>发布文章到github.io</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy 或 hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
